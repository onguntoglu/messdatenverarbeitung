
MDV_PR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800200  00000c9a  00000d2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000010ab  00800240  00800240  00000d6e  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  00000d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002cf  00000000  00000000  00000e2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001096  00000000  00000000  000010fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ed  00000000  00000000  00002193  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c72  00000000  00000000  00002880  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  000034f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000472  00000000  00000000  00003764  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000759  00000000  00000000  00003bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000432f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  40:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  44:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__vector_17>
  48:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__vector_18>
  4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  68:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  6c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  70:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  74:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__vector_29>
  78:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  7c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  80:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  84:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  88:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  8c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  90:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__vector_36>
  94:	0c 94 1f 01 	jmp	0x23e	; 0x23e <__vector_37>
  98:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  9c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  a0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  a4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  a8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  ac:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  b0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  b4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  b8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  bc:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  c0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  c4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  c8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	12 e0       	ldi	r17, 0x02	; 2
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b2 e0       	ldi	r27, 0x02	; 2
  de:	ea e9       	ldi	r30, 0x9A	; 154
  e0:	fc e0       	ldi	r31, 0x0C	; 12
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	a0 34       	cpi	r26, 0x40	; 64
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
  f2:	12 e1       	ldi	r17, 0x12	; 18
  f4:	a0 e4       	ldi	r26, 0x40	; 64
  f6:	b2 e0       	ldi	r27, 0x02	; 2
  f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
  fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
  fc:	ab 3e       	cpi	r26, 0xEB	; 235
  fe:	b1 07       	cpc	r27, r17
 100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
 102:	0e 94 87 00 	call	0x10e	; 0x10e <main>
 106:	0c 94 4b 06 	jmp	0xc96	; 0xc96 <_exit>

0000010a <__bad_interrupt>:
 10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <main>:
/**
 * \brief main function of the data acquisition system
 * \author Jürgen Funck
 * \date 2010-03-24
 */
int main(void) {
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
	cli();	// disable interrupts globally
 112:	f8 94       	cli
 	
	// set clock prescaler
	CLKPR = (1<<CLKPCE);
 114:	80 e8       	ldi	r24, 0x80	; 128
 116:	80 93 61 00 	sts	0x0061, r24
	CLKPR = 0;
 11a:	10 92 61 00 	sts	0x0061, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 11e:	86 e6       	ldi	r24, 0x66	; 102
 120:	9e e0       	ldi	r25, 0x0E	; 14
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x14>
	_delay_ms(2);


	// initialisation
	progState_t state = IDLE;
	adcInit();					// adc
 126:	0e 94 c9 04 	call	0x992	; 0x992 <adcInit>
	filterInit();	 			// filter 
 12a:	0e 94 47 03 	call	0x68e	; 0x68e <filterInit>
	serialInit(BAUD_115200); 	// serial port
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 c5 01 	call	0x38a	; 0x38a <serialInit>
	state = IDLE;				// state

	serialSendString("Hello World!\n");
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	92 e0       	ldi	r25, 0x02	; 2
 13a:	0e 94 82 01 	call	0x304	; 0x304 <serialSendString>

	// set sleep-mode
	set_sleep_mode(SLEEP_MODE_IDLE);
 13e:	83 b7       	in	r24, 0x33	; 51
 140:	81 7f       	andi	r24, 0xF1	; 241
 142:	83 bf       	out	0x33, r24	; 51

	sei(); // enable interrupts globally
 144:	78 94       	sei
 146:	80 e0       	ldi	r24, 0x00	; 0
	// main-loop
	int16_t val = 0;

	while(1) {
// ACQUIRE		
		switch(state) {
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	19 f0       	breq	.+6      	; 0x152 <main+0x44>
 14c:	82 30       	cpi	r24, 0x02	; 2
 14e:	d9 f4       	brne	.+54     	; 0x186 <main+0x78>
 150:	04 c0       	rjmp	.+8      	; 0x15a <main+0x4c>
			case ANA_MEAS:
				if(adcIsRunning() > 0) {
 152:	0e 94 03 05 	call	0xa06	; 0xa06 <adcIsRunning>
 156:	88 23       	and	r24, r24
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x44>
					state = FILT;
				}
				break;
// FILTER			
		        case FILT:
				if(filterWaitingVals() > 0) {
 15a:	0e 94 b6 02 	call	0x56c	; 0x56c <filterWaitingVals>
 15e:	89 2b       	or	r24, r25
 160:	81 f0       	breq	.+32     	; 0x182 <main+0x74>
					if(decimation==OFF) {
 162:	80 91 ea 12 	lds	r24, 0x12EA
 166:	88 23       	and	r24, r24
 168:	19 f4       	brne	.+6      	; 0x170 <main+0x62>
						val = filterIdentity();
 16a:	0e 94 2b 03 	call	0x656	; 0x656 <filterIdentity>
 16e:	02 c0       	rjmp	.+4      	; 0x174 <main+0x66>
					}
					else {
						val = filterFIRDecim();
 170:	0e 94 b0 02 	call	0x560	; 0x560 <filterFIRDecim>
 174:	8c 01       	movw	r16, r24
					}
					while(serialSendWord(val)){}
 176:	c8 01       	movw	r24, r16
 178:	0e 94 64 01 	call	0x2c8	; 0x2c8 <serialSendWord>
 17c:	88 23       	and	r24, r24
 17e:	d9 f7       	brne	.-10     	; 0x176 <main+0x68>
 180:	ec cf       	rjmp	.-40     	; 0x15a <main+0x4c>
				}
				else {
					filterReset();
 182:	0e 94 b1 02 	call	0x562	; 0x562 <filterReset>
				break;
			case IDLE: 
			default:
// WAIT FOR COMMANDS
				// check incomming messages
				state = checkMessages();
 186:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <checkMessages>

				if(state == IDLE) {
 18a:	88 23       	and	r24, r24
 18c:	e9 f6       	brne	.-70     	; 0x148 <main+0x3a>
					// sleep until the next interrupt
					sleep_enable();
 18e:	83 b7       	in	r24, 0x33	; 51
 190:	81 60       	ori	r24, 0x01	; 1
 192:	83 bf       	out	0x33, r24	; 51
					sleep_cpu();
 194:	88 95       	sleep
					sleep_disable();
 196:	83 b7       	in	r24, 0x33	; 51
 198:	8e 7f       	andi	r24, 0xFE	; 254
 19a:	83 bf       	out	0x33, r24	; 51
 19c:	f4 cf       	rjmp	.-24     	; 0x186 <main+0x78>

0000019e <serialNewLines>:

	return retCode;
}

uint16_t serialNewLines() {
	return lines;
 19e:	20 91 d4 02 	lds	r18, 0x02D4
 1a2:	30 91 d5 02 	lds	r19, 0x02D5
}
 1a6:	c9 01       	movw	r24, r18
 1a8:	08 95       	ret

000001aa <serialReadByte>:

int bytesInRcvBuf() {
	return fifoBytes((fifo_t*)&rxBuf);
}

uint8_t serialReadByte() {
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	df 93       	push	r29
 1b0:	cf 93       	push	r28
 1b2:	0f 92       	push	r0
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
	uint8_t byte;
	while(fifoPopByte(&rxBuf, &byte)){}
 1b8:	8e 01       	movw	r16, r28
 1ba:	0f 5f       	subi	r16, 0xFF	; 255
 1bc:	1f 4f       	sbci	r17, 0xFF	; 255
 1be:	8a e8       	ldi	r24, 0x8A	; 138
 1c0:	92 e0       	ldi	r25, 0x02	; 2
 1c2:	b8 01       	movw	r22, r16
 1c4:	0e 94 01 04 	call	0x802	; 0x802 <fifoPopByte>
 1c8:	88 23       	and	r24, r24
 1ca:	c9 f7       	brne	.-14     	; 0x1be <serialReadByte+0x14>
	
	return byte;
}
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	0f 90       	pop	r0
 1d0:	cf 91       	pop	r28
 1d2:	df 91       	pop	r29
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	08 95       	ret

000001da <serialReadLine>:

uint8_t serialReadLine(char* str, uint16_t length) {
 1da:	ef 92       	push	r14
 1dc:	ff 92       	push	r15
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	7c 01       	movw	r14, r24
 1e8:	8b 01       	movw	r16, r22
	uint8_t retCode = 0;

	if(lines > 0) {
 1ea:	80 91 d4 02 	lds	r24, 0x02D4
 1ee:	90 91 d5 02 	lds	r25, 0x02D5
 1f2:	89 2b       	or	r24, r25
 1f4:	11 f4       	brne	.+4      	; 0x1fa <serialReadLine+0x20>
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	1b c0       	rjmp	.+54     	; 0x230 <serialReadLine+0x56>
 1fa:	c0 e0       	ldi	r28, 0x00	; 0
 1fc:	d0 e0       	ldi	r29, 0x00	; 0
 1fe:	14 c0       	rjmp	.+40     	; 0x228 <serialReadLine+0x4e>
		for(uint16_t i=0; i<length; i++) {
			char c = (char)serialReadByte();
 200:	0e 94 d5 00 	call	0x1aa	; 0x1aa <serialReadByte>
			str[i] = c;
 204:	f7 01       	movw	r30, r14
 206:	ec 0f       	add	r30, r28
 208:	fd 1f       	adc	r31, r29
 20a:	80 83       	st	Z, r24
			if(c == '\n') {
 20c:	8a 30       	cpi	r24, 0x0A	; 10
 20e:	59 f4       	brne	.+22     	; 0x226 <serialReadLine+0x4c>
				str[i+1] = '\0';
 210:	11 82       	std	Z+1, r1	; 0x01
				lines--;
 212:	80 91 d4 02 	lds	r24, 0x02D4
 216:	90 91 d5 02 	lds	r25, 0x02D5
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	90 93 d5 02 	sts	0x02D5, r25
 220:	80 93 d4 02 	sts	0x02D4, r24
 224:	04 c0       	rjmp	.+8      	; 0x22e <serialReadLine+0x54>

uint8_t serialReadLine(char* str, uint16_t length) {
	uint8_t retCode = 0;

	if(lines > 0) {
		for(uint16_t i=0; i<length; i++) {
 226:	21 96       	adiw	r28, 0x01	; 1
 228:	c0 17       	cp	r28, r16
 22a:	d1 07       	cpc	r29, r17
 22c:	48 f3       	brcs	.-46     	; 0x200 <serialReadLine+0x26>
 22e:	80 e0       	ldi	r24, 0x00	; 0
	else {
		retCode = 1;
	}

	return retCode;
}
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	1f 91       	pop	r17
 236:	0f 91       	pop	r16
 238:	ff 90       	pop	r15
 23a:	ef 90       	pop	r14
 23c:	08 95       	ret

0000023e <__vector_37>:
 * \author Jürgen Funck
 * \date 2010-03-13
 * \brief interrupt-routine for the Usart-Data-Register-Empty-Interrupt.
 *		  is called when a byte has been send
 */
ISR(UDRE_vect) {
 23e:	1f 92       	push	r1
 240:	0f 92       	push	r0
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	0f 92       	push	r0
 246:	0b b6       	in	r0, 0x3b	; 59
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	4f 93       	push	r20
 252:	5f 93       	push	r21
 254:	6f 93       	push	r22
 256:	7f 93       	push	r23
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	af 93       	push	r26
 25e:	bf 93       	push	r27
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31
 264:	df 93       	push	r29
 266:	cf 93       	push	r28
 268:	0f 92       	push	r0
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
	uint8_t byte;

	if(fifoPopByte(&txBuf, &byte) == 0) {// if data is in the send-buffer
 26e:	80 e4       	ldi	r24, 0x40	; 64
 270:	92 e0       	ldi	r25, 0x02	; 2
 272:	be 01       	movw	r22, r28
 274:	6f 5f       	subi	r22, 0xFF	; 255
 276:	7f 4f       	sbci	r23, 0xFF	; 255
 278:	0e 94 01 04 	call	0x802	; 0x802 <fifoPopByte>
 27c:	88 23       	and	r24, r24
 27e:	21 f4       	brne	.+8      	; 0x288 <__vector_37+0x4a>
		UDR = byte;					  // send byte
 280:	89 81       	ldd	r24, Y+1	; 0x01
 282:	80 93 ce 00 	sts	0x00CE, r24
 286:	05 c0       	rjmp	.+10     	; 0x292 <__vector_37+0x54>
	}
	else {
		UCSRB &= ~(1<<UDRIE);		// disable Data-Register-Empty-Interrupt
 288:	80 91 c9 00 	lds	r24, 0x00C9
 28c:	8f 7d       	andi	r24, 0xDF	; 223
 28e:	80 93 c9 00 	sts	0x00C9, r24
	}	
}
 292:	0f 90       	pop	r0
 294:	cf 91       	pop	r28
 296:	df 91       	pop	r29
 298:	ff 91       	pop	r31
 29a:	ef 91       	pop	r30
 29c:	bf 91       	pop	r27
 29e:	af 91       	pop	r26
 2a0:	9f 91       	pop	r25
 2a2:	8f 91       	pop	r24
 2a4:	7f 91       	pop	r23
 2a6:	6f 91       	pop	r22
 2a8:	5f 91       	pop	r21
 2aa:	4f 91       	pop	r20
 2ac:	3f 91       	pop	r19
 2ae:	2f 91       	pop	r18
 2b0:	0f 90       	pop	r0
 2b2:	0b be       	out	0x3b, r0	; 59
 2b4:	0f 90       	pop	r0
 2b6:	0f be       	out	0x3f, r0	; 63
 2b8:	0f 90       	pop	r0
 2ba:	1f 90       	pop	r1
 2bc:	18 95       	reti

000002be <bytesInRcvBuf>:
		i++;								// next character
	}
}

int bytesInRcvBuf() {
	return fifoBytes((fifo_t*)&rxBuf);
 2be:	8a e8       	ldi	r24, 0x8A	; 138
 2c0:	92 e0       	ldi	r25, 0x02	; 2
 2c2:	0e 94 ad 04 	call	0x95a	; 0x95a <fifoBytes>
}
 2c6:	08 95       	ret

000002c8 <serialSendWord>:
	}

	return retCode;
}

uint8_t serialSendWord(int16_t w) {
 2c8:	bc 01       	movw	r22, r24
	uint8_t retCode = fifoPushWord(&txBuf, w);
 2ca:	80 e4       	ldi	r24, 0x40	; 64
 2cc:	92 e0       	ldi	r25, 0x02	; 2
 2ce:	0e 94 a1 03 	call	0x742	; 0x742 <fifoPushWord>
 2d2:	98 2f       	mov	r25, r24

	if(retCode == 0) {
 2d4:	88 23       	and	r24, r24
 2d6:	29 f4       	brne	.+10     	; 0x2e2 <serialSendWord+0x1a>
		UCSRB |= (1<<UDRIE);		// enable Data-Register-Empty-Interrupt
 2d8:	80 91 c9 00 	lds	r24, 0x00C9
 2dc:	80 62       	ori	r24, 0x20	; 32
 2de:	80 93 c9 00 	sts	0x00C9, r24
	}

	return retCode;
}
 2e2:	89 2f       	mov	r24, r25
 2e4:	08 95       	ret

000002e6 <serialSendByte>:
	UCSRB = (1<<RXCIE)| (1<<RXEN) | (1<<TXEN); 	// enable send/receive
	UCSRC = (0x03<<1); 							// asynchronous mode, no Parity, 8 DataBits, 1 Stop-Bit, no Parity
	UBRR  = baudrate;
}

uint8_t serialSendByte(uint8_t b) {
 2e6:	68 2f       	mov	r22, r24
	uint8_t retCode = fifoPushByte((fifo_t*)&txBuf, b);
 2e8:	80 e4       	ldi	r24, 0x40	; 64
 2ea:	92 e0       	ldi	r25, 0x02	; 2
 2ec:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <fifoPushByte>
 2f0:	98 2f       	mov	r25, r24

	if(retCode == 0) {
 2f2:	88 23       	and	r24, r24
 2f4:	29 f4       	brne	.+10     	; 0x300 <serialSendByte+0x1a>
		UCSRB |= (1<<UDRIE);		// enable Data-Register-Empty-Interrupt
 2f6:	80 91 c9 00 	lds	r24, 0x00C9
 2fa:	80 62       	ori	r24, 0x20	; 32
 2fc:	80 93 c9 00 	sts	0x00C9, r24
	}

	return retCode;
}
 300:	89 2f       	mov	r24, r25
 302:	08 95       	ret

00000304 <serialSendString>:
	}

	return retCode;
}

void serialSendString(const char* str) {
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	ec 01       	movw	r28, r24
 30a:	02 c0       	rjmp	.+4      	; 0x310 <serialSendString+0xc>
	uint16_t i=0;
	
	while(str[i] != '\0') {	// send string character by character
		serialSendByte((uint8_t)str[i]);	// send character
 30c:	0e 94 73 01 	call	0x2e6	; 0x2e6 <serialSendByte>
}

void serialSendString(const char* str) {
	uint16_t i=0;
	
	while(str[i] != '\0') {	// send string character by character
 310:	89 91       	ld	r24, Y+
 312:	88 23       	and	r24, r24
 314:	d9 f7       	brne	.-10     	; 0x30c <serialSendString+0x8>
		serialSendByte((uint8_t)str[i]);	// send character
		i++;								// next character
	}
}
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	08 95       	ret

0000031c <__vector_36>:
 * \author Jürgen Funck
 * \date 2010-03-13
 * \brief interrupt-routine for the Usart-Receive-Complete-Interrupt.
 *		  is called when a byte has been send
 */
ISR(RX_vect) {
 31c:	1f 92       	push	r1
 31e:	0f 92       	push	r0
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	0f 92       	push	r0
 324:	0b b6       	in	r0, 0x3b	; 59
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
 32a:	2f 93       	push	r18
 32c:	3f 93       	push	r19
 32e:	4f 93       	push	r20
 330:	5f 93       	push	r21
 332:	6f 93       	push	r22
 334:	7f 93       	push	r23
 336:	8f 93       	push	r24
 338:	9f 93       	push	r25
 33a:	af 93       	push	r26
 33c:	bf 93       	push	r27
 33e:	ef 93       	push	r30
 340:	ff 93       	push	r31
	uint8_t byte = UDR;
 342:	60 91 ce 00 	lds	r22, 0x00CE

	if(byte == '\n'){
 346:	6a 30       	cpi	r22, 0x0A	; 10
 348:	49 f4       	brne	.+18     	; 0x35c <__vector_36+0x40>
		lines++;
 34a:	80 91 d4 02 	lds	r24, 0x02D4
 34e:	90 91 d5 02 	lds	r25, 0x02D5
 352:	01 96       	adiw	r24, 0x01	; 1
 354:	90 93 d5 02 	sts	0x02D5, r25
 358:	80 93 d4 02 	sts	0x02D4, r24
	}

	fifoPushByte((fifo_t*)&rxBuf, byte);
 35c:	8a e8       	ldi	r24, 0x8A	; 138
 35e:	92 e0       	ldi	r25, 0x02	; 2
 360:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <fifoPushByte>
}
 364:	ff 91       	pop	r31
 366:	ef 91       	pop	r30
 368:	bf 91       	pop	r27
 36a:	af 91       	pop	r26
 36c:	9f 91       	pop	r25
 36e:	8f 91       	pop	r24
 370:	7f 91       	pop	r23
 372:	6f 91       	pop	r22
 374:	5f 91       	pop	r21
 376:	4f 91       	pop	r20
 378:	3f 91       	pop	r19
 37a:	2f 91       	pop	r18
 37c:	0f 90       	pop	r0
 37e:	0b be       	out	0x3b, r0	; 59
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <serialInit>:

/*** FUNCTIONS ***/

void serialInit(uint16_t baudrate) {
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	8c 01       	movw	r16, r24
	lines = 0;
 390:	10 92 d5 02 	sts	0x02D5, r1
 394:	10 92 d4 02 	sts	0x02D4, r1

	// initialise send- and receive buffer
	fifoInit(&txBuf, (uint8_t*)txBufMem, TX_BUFFER_MASK);
 398:	80 e4       	ldi	r24, 0x40	; 64
 39a:	92 e0       	ldi	r25, 0x02	; 2
 39c:	6a e4       	ldi	r22, 0x4A	; 74
 39e:	72 e0       	ldi	r23, 0x02	; 2
 3a0:	40 e4       	ldi	r20, 0x40	; 64
 3a2:	50 e0       	ldi	r21, 0x00	; 0
 3a4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <fifoInit>
	fifoInit(&rxBuf, (uint8_t*)rxBufMem, RX_BUFFER_MASK);
 3a8:	8a e8       	ldi	r24, 0x8A	; 138
 3aa:	92 e0       	ldi	r25, 0x02	; 2
 3ac:	64 e9       	ldi	r22, 0x94	; 148
 3ae:	72 e0       	ldi	r23, 0x02	; 2
 3b0:	40 e4       	ldi	r20, 0x40	; 64
 3b2:	50 e0       	ldi	r21, 0x00	; 0
 3b4:	0e 94 50 03 	call	0x6a0	; 0x6a0 <fifoInit>
	
	// initialise usart
	UCSRB = (1<<RXCIE)| (1<<RXEN) | (1<<TXEN); 	// enable send/receive
 3b8:	88 e9       	ldi	r24, 0x98	; 152
 3ba:	80 93 c9 00 	sts	0x00C9, r24
	UCSRC = (0x03<<1); 							// asynchronous mode, no Parity, 8 DataBits, 1 Stop-Bit, no Parity
 3be:	86 e0       	ldi	r24, 0x06	; 6
 3c0:	80 93 ca 00 	sts	0x00CA, r24
	UBRR  = baudrate;
 3c4:	10 93 cd 00 	sts	0x00CD, r17
 3c8:	00 93 cc 00 	sts	0x00CC, r16
}
 3cc:	1f 91       	pop	r17
 3ce:	0f 91       	pop	r16
 3d0:	08 95       	ret

000003d2 <checkMessages>:
#include "command.h"
#include "serial.h"
#include "adc.h"
#include "filter.h"

progState_t checkMessages() {
 3d2:	9f 92       	push	r9
 3d4:	af 92       	push	r10
 3d6:	bf 92       	push	r11
 3d8:	cf 92       	push	r12
 3da:	df 92       	push	r13
 3dc:	ef 92       	push	r14
 3de:	ff 92       	push	r15
 3e0:	0f 93       	push	r16
 3e2:	1f 93       	push	r17
 3e4:	df 93       	push	r29
 3e6:	cf 93       	push	r28
 3e8:	cd b7       	in	r28, 0x3d	; 61
 3ea:	de b7       	in	r29, 0x3e	; 62
 3ec:	a1 97       	sbiw	r28, 0x21	; 33
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	f8 94       	cli
 3f2:	de bf       	out	0x3e, r29	; 62
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	cd bf       	out	0x3d, r28	; 61
	progState_t newState = IDLE;
	char msg[MAX_COMMAND_LINE_LENGTH+1];

	if(serialReadLine(msg,MAX_COMMAND_LINE_LENGTH) == 0) {
 3f8:	8e 01       	movw	r16, r28
 3fa:	0f 5f       	subi	r16, 0xFF	; 255
 3fc:	1f 4f       	sbci	r17, 0xFF	; 255
 3fe:	c8 01       	movw	r24, r16
 400:	60 e2       	ldi	r22, 0x20	; 32
 402:	70 e0       	ldi	r23, 0x00	; 0
 404:	0e 94 ed 00 	call	0x1da	; 0x1da <serialReadLine>
 408:	88 23       	and	r24, r24
 40a:	09 f0       	breq	.+2      	; 0x40e <checkMessages+0x3c>
 40c:	96 c0       	rjmp	.+300    	; 0x53a <checkMessages+0x168>

		if(strncmp("ANA",msg,3)==0) {
 40e:	8e e0       	ldi	r24, 0x0E	; 14
 410:	92 e0       	ldi	r25, 0x02	; 2
 412:	b8 01       	movw	r22, r16
 414:	43 e0       	ldi	r20, 0x03	; 3
 416:	50 e0       	ldi	r21, 0x00	; 0
 418:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <strncmp>
 41c:	00 97       	sbiw	r24, 0x00	; 0
 41e:	09 f0       	breq	.+2      	; 0x422 <checkMessages+0x50>
 420:	7f c0       	rjmp	.+254    	; 0x520 <checkMessages+0x14e>
			// parse parameters
			char* p_param = strtok(msg," ");
 422:	c8 01       	movw	r24, r16
 424:	62 e1       	ldi	r22, 0x12	; 18
 426:	72 e0       	ldi	r23, 0x02	; 2
 428:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <strtok>
			uint16_t sRate      = 0;
			uint32_t sCount     = 0;
			trigger_t tMode     = NONE;
			int16_t tLevel      = 0;

			p_param = strtok(NULL," ");
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	62 e1       	ldi	r22, 0x12	; 18
 432:	72 e0       	ldi	r23, 0x02	; 2
 434:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <strtok>
			if(p_param != NULL) {
 438:	00 97       	sbiw	r24, 0x00	; 0
 43a:	19 f4       	brne	.+6      	; 0x442 <checkMessages+0x70>
 43c:	aa 24       	eor	r10, r10
 43e:	bb 24       	eor	r11, r11
 440:	03 c0       	rjmp	.+6      	; 0x448 <checkMessages+0x76>
				sRate = atoi(p_param);
 442:	0e 94 af 05 	call	0xb5e	; 0xb5e <atoi>
 446:	5c 01       	movw	r10, r24
			}

			p_param = strtok(NULL," ");
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	62 e1       	ldi	r22, 0x12	; 18
 44e:	72 e0       	ldi	r23, 0x02	; 2
 450:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <strtok>
			if(p_param != NULL) {
 454:	00 97       	sbiw	r24, 0x00	; 0
 456:	21 f4       	brne	.+8      	; 0x460 <checkMessages+0x8e>
 458:	ee 24       	eor	r14, r14
 45a:	ff 24       	eor	r15, r15
 45c:	87 01       	movw	r16, r14
 45e:	07 c0       	rjmp	.+14     	; 0x46e <checkMessages+0x9c>
				sCount = atol(p_param);
 460:	0e 94 cd 05 	call	0xb9a	; 0xb9a <atol>
 464:	ac 01       	movw	r20, r24
 466:	cb 01       	movw	r24, r22
 468:	da 01       	movw	r26, r20
 46a:	7c 01       	movw	r14, r24
 46c:	8d 01       	movw	r16, r26
			}

			p_param = strtok(NULL," ");
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	62 e1       	ldi	r22, 0x12	; 18
 474:	72 e0       	ldi	r23, 0x02	; 2
 476:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <strtok>
			if(p_param != NULL) {
 47a:	00 97       	sbiw	r24, 0x00	; 0
 47c:	11 f4       	brne	.+4      	; 0x482 <checkMessages+0xb0>
 47e:	99 24       	eor	r9, r9
 480:	03 c0       	rjmp	.+6      	; 0x488 <checkMessages+0xb6>
				tMode = atoi(p_param);
 482:	0e 94 af 05 	call	0xb5e	; 0xb5e <atoi>
 486:	98 2e       	mov	r9, r24
			}

			p_param = strtok(NULL," ");
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	62 e1       	ldi	r22, 0x12	; 18
 48e:	72 e0       	ldi	r23, 0x02	; 2
 490:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <strtok>
			if(p_param != NULL) {
 494:	00 97       	sbiw	r24, 0x00	; 0
 496:	19 f4       	brne	.+6      	; 0x49e <checkMessages+0xcc>
 498:	cc 24       	eor	r12, r12
 49a:	dd 24       	eor	r13, r13
 49c:	03 c0       	rjmp	.+6      	; 0x4a4 <checkMessages+0xd2>
				tLevel = atoi(p_param);
 49e:	0e 94 af 05 	call	0xb5e	; 0xb5e <atoi>
 4a2:	6c 01       	movw	r12, r24
			}
			p_param = strtok(NULL," ");
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	62 e1       	ldi	r22, 0x12	; 18
 4aa:	72 e0       	ldi	r23, 0x02	; 2
 4ac:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <strtok>
			if(p_param != NULL) {
 4b0:	00 97       	sbiw	r24, 0x00	; 0
 4b2:	21 f0       	breq	.+8      	; 0x4bc <checkMessages+0xea>
				decimation = atoi(p_param);
 4b4:	0e 94 af 05 	call	0xb5e	; 0xb5e <atoi>
 4b8:	80 93 ea 12 	sts	0x12EA, r24
			}

			if((sRate != 0) && (sCount != 0)) {
 4bc:	a1 14       	cp	r10, r1
 4be:	b1 04       	cpc	r11, r1
 4c0:	29 f1       	breq	.+74     	; 0x50c <checkMessages+0x13a>
 4c2:	e1 14       	cp	r14, r1
 4c4:	f1 04       	cpc	r15, r1
 4c6:	01 05       	cpc	r16, r1
 4c8:	11 05       	cpc	r17, r1
 4ca:	01 f1       	breq	.+64     	; 0x50c <checkMessages+0x13a>
				if(decimation==ON) {
 4cc:	80 91 ea 12 	lds	r24, 0x12EA
 4d0:	81 30       	cpi	r24, 0x01	; 1
 4d2:	99 f4       	brne	.+38     	; 0x4fa <checkMessages+0x128>
					adcStart(sRate,DEC_RATIO*sCount+FILTER_ORD,tMode,tLevel);
 4d4:	b8 01       	movw	r22, r16
 4d6:	a7 01       	movw	r20, r14
 4d8:	82 e0       	ldi	r24, 0x02	; 2
 4da:	44 0f       	add	r20, r20
 4dc:	55 1f       	adc	r21, r21
 4de:	66 1f       	adc	r22, r22
 4e0:	77 1f       	adc	r23, r23
 4e2:	8a 95       	dec	r24
 4e4:	d1 f7       	brne	.-12     	; 0x4da <checkMessages+0x108>
 4e6:	4e 0d       	add	r20, r14
 4e8:	5f 1d       	adc	r21, r15
 4ea:	60 1f       	adc	r22, r16
 4ec:	71 1f       	adc	r23, r17
 4ee:	4c 5f       	subi	r20, 0xFC	; 252
 4f0:	5f 4f       	sbci	r21, 0xFF	; 255
 4f2:	6f 4f       	sbci	r22, 0xFF	; 255
 4f4:	7f 4f       	sbci	r23, 0xFF	; 255
 4f6:	c5 01       	movw	r24, r10
 4f8:	03 c0       	rjmp	.+6      	; 0x500 <checkMessages+0x12e>
				}
				else {
					adcStart(sRate,sCount,tMode,tLevel);
 4fa:	c5 01       	movw	r24, r10
 4fc:	b8 01       	movw	r22, r16
 4fe:	a7 01       	movw	r20, r14
 500:	29 2d       	mov	r18, r9
 502:	86 01       	movw	r16, r12
 504:	0e 94 e4 04 	call	0x9c8	; 0x9c8 <adcStart>
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	18 c0       	rjmp	.+48     	; 0x53c <checkMessages+0x16a>
				}
				newState = ANA_MEAS;
			}
			else {
				serialSendString("invalid parameters");
 50c:	84 e1       	ldi	r24, 0x14	; 20
 50e:	92 e0       	ldi	r25, 0x02	; 2
 510:	0e 94 82 01 	call	0x304	; 0x304 <serialSendString>
				serialSendByte('\'');
 514:	87 e2       	ldi	r24, 0x27	; 39
 516:	0e 94 73 01 	call	0x2e6	; 0x2e6 <serialSendByte>
				serialSendString(msg);
 51a:	ce 01       	movw	r24, r28
 51c:	01 96       	adiw	r24, 0x01	; 1
 51e:	08 c0       	rjmp	.+16     	; 0x530 <checkMessages+0x15e>
				serialSendByte('\'');
				newState = IDLE;
			}
		}
		else {
			serialSendString("unknown command");
 520:	87 e2       	ldi	r24, 0x27	; 39
 522:	92 e0       	ldi	r25, 0x02	; 2
 524:	0e 94 82 01 	call	0x304	; 0x304 <serialSendString>
			serialSendByte('\'');
 528:	87 e2       	ldi	r24, 0x27	; 39
 52a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <serialSendByte>
			serialSendString(msg);
 52e:	c8 01       	movw	r24, r16
 530:	0e 94 82 01 	call	0x304	; 0x304 <serialSendString>
			serialSendByte('\'');	
 534:	87 e2       	ldi	r24, 0x27	; 39
 536:	0e 94 73 01 	call	0x2e6	; 0x2e6 <serialSendByte>
 53a:	80 e0       	ldi	r24, 0x00	; 0
			newState = IDLE;
		}
	}	

	return newState;
}
 53c:	a1 96       	adiw	r28, 0x21	; 33
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	f8 94       	cli
 542:	de bf       	out	0x3e, r29	; 62
 544:	0f be       	out	0x3f, r0	; 63
 546:	cd bf       	out	0x3d, r28	; 61
 548:	cf 91       	pop	r28
 54a:	df 91       	pop	r29
 54c:	1f 91       	pop	r17
 54e:	0f 91       	pop	r16
 550:	ff 90       	pop	r15
 552:	ef 90       	pop	r14
 554:	df 90       	pop	r13
 556:	cf 90       	pop	r12
 558:	bf 90       	pop	r11
 55a:	af 90       	pop	r10
 55c:	9f 90       	pop	r9
 55e:	08 95       	ret

00000560 <filterFIRDecim>:
	return (accum >> 15);	
}

uint16_t filterFIRDecim() {
	// TODO
}
 560:	08 95       	ret

00000562 <filterReset>:
inline uint16_t filterWaitingVals() {
	return fifoBytes(&filtInBuf)/2;
}

void filterReset() {
	fifoClear(&filtInBuf);
 562:	86 ed       	ldi	r24, 0xD6	; 214
 564:	92 e0       	ldi	r25, 0x02	; 2
 566:	0e 94 5f 03 	call	0x6be	; 0x6be <fifoClear>
}
 56a:	08 95       	ret

0000056c <filterWaitingVals>:
inline uint8_t filterWrite2Buf(int16_t val) {
	return fifoPushWord(&filtInBuf, val);
}

inline uint16_t filterWaitingVals() {
	return fifoBytes(&filtInBuf)/2;
 56c:	86 ed       	ldi	r24, 0xD6	; 214
 56e:	92 e0       	ldi	r25, 0x02	; 2
 570:	0e 94 ad 04 	call	0x95a	; 0x95a <fifoBytes>
 574:	9c 01       	movw	r18, r24
 576:	36 95       	lsr	r19
 578:	27 95       	ror	r18
}
 57a:	c9 01       	movw	r24, r18
 57c:	08 95       	ret

0000057e <filterWrite2Buf>:

uint16_t filterFIRDecim() {
	// TODO
}

inline uint8_t filterWrite2Buf(int16_t val) {
 57e:	bc 01       	movw	r22, r24
	return fifoPushWord(&filtInBuf, val);
 580:	86 ed       	ldi	r24, 0xD6	; 214
 582:	92 e0       	ldi	r25, 0x02	; 2
 584:	0e 94 a1 03 	call	0x742	; 0x742 <fifoPushWord>
}
 588:	08 95       	ret

0000058a <filterFIR>:
	decimation 		  = OFF;
	while(fifoPopWord(&filtInBuf, &val));
	return val;
}

uint16_t filterFIR() {
 58a:	8f 92       	push	r8
 58c:	9f 92       	push	r9
 58e:	af 92       	push	r10
 590:	bf 92       	push	r11
 592:	cf 92       	push	r12
 594:	df 92       	push	r13
 596:	ef 92       	push	r14
 598:	ff 92       	push	r15
 59a:	0f 93       	push	r16
 59c:	1f 93       	push	r17
 59e:	df 93       	push	r29
 5a0:	cf 93       	push	r28
 5a2:	00 d0       	rcall	.+0      	; 0x5a4 <filterFIR+0x1a>
 5a4:	cd b7       	in	r28, 0x3d	; 61
 5a6:	de b7       	in	r29, 0x3e	; 62
 5a8:	27 e3       	ldi	r18, 0x37	; 55
 5aa:	a2 2e       	mov	r10, r18
 5ac:	22 e0       	ldi	r18, 0x02	; 2
 5ae:	b2 2e       	mov	r11, r18
 5b0:	cc 24       	eor	r12, r12
 5b2:	dd 24       	eor	r13, r13
 5b4:	ee 24       	eor	r14, r14
 5b6:	ff 24       	eor	r15, r15
 5b8:	87 01       	movw	r16, r14
	int32_t accum = 0;
	int16_t val;

	// calculate output values of the filter
	for(i=0; i<FILTER_ORD; i++) {
		if(fifoReadWord(&filtInBuf, FILTER_ORD-(i+1), &val)==0) {
 5ba:	4e 01       	movw	r8, r28
 5bc:	08 94       	sec
 5be:	81 1c       	adc	r8, r1
 5c0:	91 1c       	adc	r9, r1
 5c2:	b6 01       	movw	r22, r12
 5c4:	60 95       	com	r22
 5c6:	70 95       	com	r23
 5c8:	6c 5f       	subi	r22, 0xFC	; 252
 5ca:	7f 4f       	sbci	r23, 0xFF	; 255
 5cc:	86 ed       	ldi	r24, 0xD6	; 214
 5ce:	92 e0       	ldi	r25, 0x02	; 2
 5d0:	a4 01       	movw	r20, r8
 5d2:	0e 94 76 04 	call	0x8ec	; 0x8ec <fifoReadWord>
 5d6:	88 23       	and	r24, r24
 5d8:	99 f4       	brne	.+38     	; 0x600 <filterFIR+0x76>
			accum += (((int32_t)FIRkoeff[i]) * val);
 5da:	69 81       	ldd	r22, Y+1	; 0x01
 5dc:	7a 81       	ldd	r23, Y+2	; 0x02
 5de:	88 27       	eor	r24, r24
 5e0:	77 fd       	sbrc	r23, 7
 5e2:	80 95       	com	r24
 5e4:	98 2f       	mov	r25, r24
 5e6:	f5 01       	movw	r30, r10
 5e8:	20 81       	ld	r18, Z
 5ea:	31 81       	ldd	r19, Z+1	; 0x01
 5ec:	44 27       	eor	r20, r20
 5ee:	37 fd       	sbrc	r19, 7
 5f0:	40 95       	com	r20
 5f2:	54 2f       	mov	r21, r20
 5f4:	0e 94 90 05 	call	0xb20	; 0xb20 <__mulsi3>
 5f8:	e6 0e       	add	r14, r22
 5fa:	f7 1e       	adc	r15, r23
 5fc:	08 1f       	adc	r16, r24
 5fe:	19 1f       	adc	r17, r25
	uint16_t i;
	int32_t accum = 0;
	int16_t val;

	// calculate output values of the filter
	for(i=0; i<FILTER_ORD; i++) {
 600:	08 94       	sec
 602:	c1 1c       	adc	r12, r1
 604:	d1 1c       	adc	r13, r1
 606:	82 e0       	ldi	r24, 0x02	; 2
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	a8 0e       	add	r10, r24
 60c:	b9 1e       	adc	r11, r25
 60e:	94 e0       	ldi	r25, 0x04	; 4
 610:	c9 16       	cp	r12, r25
 612:	d1 04       	cpc	r13, r1
 614:	b1 f6       	brne	.-84     	; 0x5c2 <filterFIR+0x38>
		if(fifoReadWord(&filtInBuf, FILTER_ORD-(i+1), &val)==0) {
			accum += (((int32_t)FIRkoeff[i]) * val);
		}
	}
	// delete the oldest value from the buffer
	fifoPopWord(&filtInBuf, &val);
 616:	86 ed       	ldi	r24, 0xD6	; 214
 618:	92 e0       	ldi	r25, 0x02	; 2
 61a:	be 01       	movw	r22, r28
 61c:	6f 5f       	subi	r22, 0xFF	; 255
 61e:	7f 4f       	sbci	r23, 0xFF	; 255
 620:	0e 94 39 04 	call	0x872	; 0x872 <fifoPopWord>
 624:	a8 01       	movw	r20, r16
 626:	97 01       	movw	r18, r14
 628:	9f e0       	ldi	r25, 0x0F	; 15
 62a:	55 95       	asr	r21
 62c:	47 95       	ror	r20
 62e:	37 95       	ror	r19
 630:	27 95       	ror	r18
 632:	9a 95       	dec	r25
 634:	d1 f7       	brne	.-12     	; 0x62a <filterFIR+0xa0>

	// convert to integer values
	return (accum >> 15);	
}
 636:	c9 01       	movw	r24, r18
 638:	0f 90       	pop	r0
 63a:	0f 90       	pop	r0
 63c:	cf 91       	pop	r28
 63e:	df 91       	pop	r29
 640:	1f 91       	pop	r17
 642:	0f 91       	pop	r16
 644:	ff 90       	pop	r15
 646:	ef 90       	pop	r14
 648:	df 90       	pop	r13
 64a:	cf 90       	pop	r12
 64c:	bf 90       	pop	r11
 64e:	af 90       	pop	r10
 650:	9f 90       	pop	r9
 652:	8f 90       	pop	r8
 654:	08 95       	ret

00000656 <filterIdentity>:
void filterInit() {
	//initialise In- and Outputbuffer
	fifoInit(&filtInBuf,  (uint8_t*)filtInBufMem,2*(FILTER_IN_BUF_MASK));
}

int16_t filterIdentity() {
 656:	0f 93       	push	r16
 658:	1f 93       	push	r17
 65a:	df 93       	push	r29
 65c:	cf 93       	push	r28
 65e:	00 d0       	rcall	.+0      	; 0x660 <filterIdentity+0xa>
 660:	cd b7       	in	r28, 0x3d	; 61
 662:	de b7       	in	r29, 0x3e	; 62
	int16_t val;
	
	decimation 		  = OFF;
 664:	10 92 ea 12 	sts	0x12EA, r1
	while(fifoPopWord(&filtInBuf, &val));
 668:	8e 01       	movw	r16, r28
 66a:	0f 5f       	subi	r16, 0xFF	; 255
 66c:	1f 4f       	sbci	r17, 0xFF	; 255
 66e:	86 ed       	ldi	r24, 0xD6	; 214
 670:	92 e0       	ldi	r25, 0x02	; 2
 672:	b8 01       	movw	r22, r16
 674:	0e 94 39 04 	call	0x872	; 0x872 <fifoPopWord>
 678:	88 23       	and	r24, r24
 67a:	c9 f7       	brne	.-14     	; 0x66e <filterIdentity+0x18>
	return val;
}
 67c:	89 81       	ldd	r24, Y+1	; 0x01
 67e:	9a 81       	ldd	r25, Y+2	; 0x02
 680:	0f 90       	pop	r0
 682:	0f 90       	pop	r0
 684:	cf 91       	pop	r28
 686:	df 91       	pop	r29
 688:	1f 91       	pop	r17
 68a:	0f 91       	pop	r16
 68c:	08 95       	ret

0000068e <filterInit>:
static int16_t FIRkoeff[FILTER_ORD] = {FIR_COEFF};

/*** FUNCTIONS ***/
void filterInit() {
	//initialise In- and Outputbuffer
	fifoInit(&filtInBuf,  (uint8_t*)filtInBufMem,2*(FILTER_IN_BUF_MASK));
 68e:	86 ed       	ldi	r24, 0xD6	; 214
 690:	92 e0       	ldi	r25, 0x02	; 2
 692:	60 ee       	ldi	r22, 0xE0	; 224
 694:	72 e0       	ldi	r23, 0x02	; 2
 696:	40 e0       	ldi	r20, 0x00	; 0
 698:	50 e1       	ldi	r21, 0x10	; 16
 69a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <fifoInit>
}
 69e:	08 95       	ret

000006a0 <fifoInit>:
#include <avr/interrupt.h>
#include <util/atomic.h>

/*** FUNCTIONS ***/

void fifoInit(volatile fifo_t* pFifo, uint8_t* pdata, uint16_t mask) {
 6a0:	fc 01       	movw	r30, r24

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 6a2:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 6a4:	f8 94       	cli
		pFifo->data		= pdata;
 6a6:	71 83       	std	Z+1, r23	; 0x01
 6a8:	60 83       	st	Z, r22
		pFifo->iStart	= 0;
 6aa:	13 82       	std	Z+3, r1	; 0x03
 6ac:	12 82       	std	Z+2, r1	; 0x02
		pFifo->iEnd		= 0;
 6ae:	15 82       	std	Z+5, r1	; 0x05
 6b0:	14 82       	std	Z+4, r1	; 0x04
		pFifo->bytes	= 0;
 6b2:	17 82       	std	Z+7, r1	; 0x07
 6b4:	16 82       	std	Z+6, r1	; 0x06
		pFifo->mask		= mask;
 6b6:	51 87       	std	Z+9, r21	; 0x09
 6b8:	40 87       	std	Z+8, r20	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 6ba:	8f bf       	out	0x3f, r24	; 63
	}
}
 6bc:	08 95       	ret

000006be <fifoClear>:

void fifoClear(volatile fifo_t* pFifo) {
 6be:	fc 01       	movw	r30, r24

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 6c0:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 6c2:	f8 94       	cli
		pFifo->iStart	= 0;
 6c4:	13 82       	std	Z+3, r1	; 0x03
 6c6:	12 82       	std	Z+2, r1	; 0x02
		pFifo->iEnd		= 0;
 6c8:	15 82       	std	Z+5, r1	; 0x05
 6ca:	14 82       	std	Z+4, r1	; 0x04
		pFifo->bytes	= 0;
 6cc:	17 82       	std	Z+7, r1	; 0x07
 6ce:	16 82       	std	Z+6, r1	; 0x06
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 6d0:	8f bf       	out	0x3f, r24	; 63
	}
}
 6d2:	08 95       	ret

000006d4 <fifoPushByte>:

uint8_t fifoPushByte(volatile fifo_t* pFifo, uint8_t data) {
 6d4:	dc 01       	movw	r26, r24
	uint8_t retCode = 0;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 6d6:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 6d8:	f8 94       	cli
		if(pFifo->bytes < pFifo->mask) {
 6da:	16 96       	adiw	r26, 0x06	; 6
 6dc:	2d 91       	ld	r18, X+
 6de:	3c 91       	ld	r19, X
 6e0:	17 97       	sbiw	r26, 0x07	; 7
 6e2:	18 96       	adiw	r26, 0x08	; 8
 6e4:	8d 91       	ld	r24, X+
 6e6:	9c 91       	ld	r25, X
 6e8:	19 97       	sbiw	r26, 0x09	; 9
 6ea:	28 17       	cp	r18, r24
 6ec:	39 07       	cpc	r19, r25
 6ee:	10 f0       	brcs	.+4      	; 0x6f4 <fifoPushByte+0x20>
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	25 c0       	rjmp	.+74     	; 0x73e <fifoPushByte+0x6a>
			pFifo->data[pFifo->iEnd] = data;					// write data to buffer
 6f4:	ed 91       	ld	r30, X+
 6f6:	fc 91       	ld	r31, X
 6f8:	11 97       	sbiw	r26, 0x01	; 1
 6fa:	14 96       	adiw	r26, 0x04	; 4
 6fc:	8d 91       	ld	r24, X+
 6fe:	9c 91       	ld	r25, X
 700:	15 97       	sbiw	r26, 0x05	; 5
 702:	e8 0f       	add	r30, r24
 704:	f9 1f       	adc	r31, r25
 706:	60 83       	st	Z, r22
			pFifo->iEnd = (pFifo->iEnd+1) & (pFifo->mask-1);	// increment buffer-end-index
 708:	14 96       	adiw	r26, 0x04	; 4
 70a:	2d 91       	ld	r18, X+
 70c:	3c 91       	ld	r19, X
 70e:	15 97       	sbiw	r26, 0x05	; 5
 710:	18 96       	adiw	r26, 0x08	; 8
 712:	8d 91       	ld	r24, X+
 714:	9c 91       	ld	r25, X
 716:	19 97       	sbiw	r26, 0x09	; 9
 718:	01 97       	sbiw	r24, 0x01	; 1
 71a:	2f 5f       	subi	r18, 0xFF	; 255
 71c:	3f 4f       	sbci	r19, 0xFF	; 255
 71e:	82 23       	and	r24, r18
 720:	93 23       	and	r25, r19
 722:	15 96       	adiw	r26, 0x05	; 5
 724:	9c 93       	st	X, r25
 726:	8e 93       	st	-X, r24
 728:	14 97       	sbiw	r26, 0x04	; 4
			pFifo->bytes++; 									// increment number of bytes in buffer
 72a:	16 96       	adiw	r26, 0x06	; 6
 72c:	8d 91       	ld	r24, X+
 72e:	9c 91       	ld	r25, X
 730:	17 97       	sbiw	r26, 0x07	; 7
 732:	01 96       	adiw	r24, 0x01	; 1
 734:	17 96       	adiw	r26, 0x07	; 7
 736:	9c 93       	st	X, r25
 738:	8e 93       	st	-X, r24
 73a:	16 97       	sbiw	r26, 0x06	; 6
 73c:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 73e:	4f bf       	out	0x3f, r20	; 63
			retCode = 1;
		}
	}

	return retCode;
}
 740:	08 95       	ret

00000742 <fifoPushWord>:

uint8_t fifoPushWord(volatile fifo_t* pFifo, int16_t data) {
 742:	df 93       	push	r29
 744:	cf 93       	push	r28
 746:	00 d0       	rcall	.+0      	; 0x748 <fifoPushWord+0x6>
 748:	cd b7       	in	r28, 0x3d	; 61
 74a:	de b7       	in	r29, 0x3e	; 62
 74c:	dc 01       	movw	r26, r24
 74e:	7a 83       	std	Y+2, r23	; 0x02
 750:	69 83       	std	Y+1, r22	; 0x01
	uint8_t retCode = 0;
	uint8_t* pdata = (uint8_t*)&data;
	int i;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 752:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 754:	f8 94       	cli
		if(pFifo->bytes < (pFifo->mask-1)) {
 756:	16 96       	adiw	r26, 0x06	; 6
 758:	2d 91       	ld	r18, X+
 75a:	3c 91       	ld	r19, X
 75c:	17 97       	sbiw	r26, 0x07	; 7
 75e:	18 96       	adiw	r26, 0x08	; 8
 760:	8d 91       	ld	r24, X+
 762:	9c 91       	ld	r25, X
 764:	19 97       	sbiw	r26, 0x09	; 9
 766:	01 97       	sbiw	r24, 0x01	; 1
 768:	28 17       	cp	r18, r24
 76a:	39 07       	cpc	r19, r25
 76c:	10 f0       	brcs	.+4      	; 0x772 <fifoPushWord+0x30>
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	42 c0       	rjmp	.+132    	; 0x7f6 <fifoPushWord+0xb4>
			for(i=0; i<2; i++) {
				pFifo->data[pFifo->iEnd] = *pdata;					// write data to buffer
 772:	ed 91       	ld	r30, X+
 774:	fc 91       	ld	r31, X
 776:	11 97       	sbiw	r26, 0x01	; 1
 778:	14 96       	adiw	r26, 0x04	; 4
 77a:	8d 91       	ld	r24, X+
 77c:	9c 91       	ld	r25, X
 77e:	15 97       	sbiw	r26, 0x05	; 5
 780:	e8 0f       	add	r30, r24
 782:	f9 1f       	adc	r31, r25
 784:	89 81       	ldd	r24, Y+1	; 0x01
 786:	80 83       	st	Z, r24
				pFifo->iEnd = (pFifo->iEnd+1) & (pFifo->mask-1);	// increment buffer end index
 788:	14 96       	adiw	r26, 0x04	; 4
 78a:	2d 91       	ld	r18, X+
 78c:	3c 91       	ld	r19, X
 78e:	15 97       	sbiw	r26, 0x05	; 5
 790:	18 96       	adiw	r26, 0x08	; 8
 792:	8d 91       	ld	r24, X+
 794:	9c 91       	ld	r25, X
 796:	19 97       	sbiw	r26, 0x09	; 9
 798:	01 97       	sbiw	r24, 0x01	; 1
 79a:	2f 5f       	subi	r18, 0xFF	; 255
 79c:	3f 4f       	sbci	r19, 0xFF	; 255
 79e:	82 23       	and	r24, r18
 7a0:	93 23       	and	r25, r19
 7a2:	15 96       	adiw	r26, 0x05	; 5
 7a4:	9c 93       	st	X, r25
 7a6:	8e 93       	st	-X, r24
 7a8:	14 97       	sbiw	r26, 0x04	; 4
	int i;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		if(pFifo->bytes < (pFifo->mask-1)) {
			for(i=0; i<2; i++) {
				pFifo->data[pFifo->iEnd] = *pdata;					// write data to buffer
 7aa:	ed 91       	ld	r30, X+
 7ac:	fc 91       	ld	r31, X
 7ae:	11 97       	sbiw	r26, 0x01	; 1
 7b0:	14 96       	adiw	r26, 0x04	; 4
 7b2:	8d 91       	ld	r24, X+
 7b4:	9c 91       	ld	r25, X
 7b6:	15 97       	sbiw	r26, 0x05	; 5
 7b8:	e8 0f       	add	r30, r24
 7ba:	f9 1f       	adc	r31, r25
 7bc:	8a 81       	ldd	r24, Y+2	; 0x02
 7be:	80 83       	st	Z, r24
				pFifo->iEnd = (pFifo->iEnd+1) & (pFifo->mask-1);	// increment buffer end index
 7c0:	14 96       	adiw	r26, 0x04	; 4
 7c2:	2d 91       	ld	r18, X+
 7c4:	3c 91       	ld	r19, X
 7c6:	15 97       	sbiw	r26, 0x05	; 5
 7c8:	18 96       	adiw	r26, 0x08	; 8
 7ca:	8d 91       	ld	r24, X+
 7cc:	9c 91       	ld	r25, X
 7ce:	19 97       	sbiw	r26, 0x09	; 9
 7d0:	01 97       	sbiw	r24, 0x01	; 1
 7d2:	2f 5f       	subi	r18, 0xFF	; 255
 7d4:	3f 4f       	sbci	r19, 0xFF	; 255
 7d6:	82 23       	and	r24, r18
 7d8:	93 23       	and	r25, r19
 7da:	15 96       	adiw	r26, 0x05	; 5
 7dc:	9c 93       	st	X, r25
 7de:	8e 93       	st	-X, r24
 7e0:	14 97       	sbiw	r26, 0x04	; 4
				pdata++;
			} 
			pFifo->bytes += 2;	// increment number of bytes in buffer
 7e2:	16 96       	adiw	r26, 0x06	; 6
 7e4:	8d 91       	ld	r24, X+
 7e6:	9c 91       	ld	r25, X
 7e8:	17 97       	sbiw	r26, 0x07	; 7
 7ea:	02 96       	adiw	r24, 0x02	; 2
 7ec:	17 96       	adiw	r26, 0x07	; 7
 7ee:	9c 93       	st	X, r25
 7f0:	8e 93       	st	-X, r24
 7f2:	16 97       	sbiw	r26, 0x06	; 6
 7f4:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 7f6:	4f bf       	out	0x3f, r20	; 63
			retCode = 1;
		}
	}

	return retCode;
}
 7f8:	0f 90       	pop	r0
 7fa:	0f 90       	pop	r0
 7fc:	cf 91       	pop	r28
 7fe:	df 91       	pop	r29
 800:	08 95       	ret

00000802 <fifoPopByte>:

uint8_t fifoPopByte(volatile fifo_t* pFifo, uint8_t* pdata) {
 802:	cf 93       	push	r28
 804:	df 93       	push	r29
 806:	dc 01       	movw	r26, r24
 808:	eb 01       	movw	r28, r22
	uint8_t retCode = 0;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 80a:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 80c:	f8 94       	cli
		if(pFifo->bytes>0) {
 80e:	16 96       	adiw	r26, 0x06	; 6
 810:	8d 91       	ld	r24, X+
 812:	9c 91       	ld	r25, X
 814:	17 97       	sbiw	r26, 0x07	; 7
 816:	89 2b       	or	r24, r25
 818:	11 f4       	brne	.+4      	; 0x81e <fifoPopByte+0x1c>
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	26 c0       	rjmp	.+76     	; 0x86a <fifoPopByte+0x68>
			*pdata = pFifo->data[pFifo->iStart];					// read data from buffer
 81e:	ed 91       	ld	r30, X+
 820:	fc 91       	ld	r31, X
 822:	11 97       	sbiw	r26, 0x01	; 1
 824:	12 96       	adiw	r26, 0x02	; 2
 826:	8d 91       	ld	r24, X+
 828:	9c 91       	ld	r25, X
 82a:	13 97       	sbiw	r26, 0x03	; 3
 82c:	e8 0f       	add	r30, r24
 82e:	f9 1f       	adc	r31, r25
 830:	80 81       	ld	r24, Z
 832:	88 83       	st	Y, r24
			pFifo->iStart = (pFifo->iStart+1) & (pFifo->mask-1);	// increment buffer start index
 834:	12 96       	adiw	r26, 0x02	; 2
 836:	2d 91       	ld	r18, X+
 838:	3c 91       	ld	r19, X
 83a:	13 97       	sbiw	r26, 0x03	; 3
 83c:	18 96       	adiw	r26, 0x08	; 8
 83e:	8d 91       	ld	r24, X+
 840:	9c 91       	ld	r25, X
 842:	19 97       	sbiw	r26, 0x09	; 9
 844:	01 97       	sbiw	r24, 0x01	; 1
 846:	2f 5f       	subi	r18, 0xFF	; 255
 848:	3f 4f       	sbci	r19, 0xFF	; 255
 84a:	82 23       	and	r24, r18
 84c:	93 23       	and	r25, r19
 84e:	13 96       	adiw	r26, 0x03	; 3
 850:	9c 93       	st	X, r25
 852:	8e 93       	st	-X, r24
 854:	12 97       	sbiw	r26, 0x02	; 2
			pFifo->bytes--;											// decrement number of bytes in buffer
 856:	16 96       	adiw	r26, 0x06	; 6
 858:	8d 91       	ld	r24, X+
 85a:	9c 91       	ld	r25, X
 85c:	17 97       	sbiw	r26, 0x07	; 7
 85e:	01 97       	sbiw	r24, 0x01	; 1
 860:	17 96       	adiw	r26, 0x07	; 7
 862:	9c 93       	st	X, r25
 864:	8e 93       	st	-X, r24
 866:	16 97       	sbiw	r26, 0x06	; 6
 868:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 86a:	4f bf       	out	0x3f, r20	; 63
			retCode = 1;
		}
	}
	
	return retCode;
}
 86c:	df 91       	pop	r29
 86e:	cf 91       	pop	r28
 870:	08 95       	ret

00000872 <fifoPopWord>:

uint8_t fifoPopWord(volatile fifo_t* pFifo, int16_t* pdata) {
 872:	cf 93       	push	r28
 874:	df 93       	push	r29
 876:	ec 01       	movw	r28, r24
	uint8_t retCode = 0;
	uint8_t*  pd = (uint8_t*)pdata;
	int i;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 878:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 87a:	f8 94       	cli
		if(pFifo->bytes>1) {
 87c:	8e 81       	ldd	r24, Y+6	; 0x06
 87e:	9f 81       	ldd	r25, Y+7	; 0x07
 880:	02 97       	sbiw	r24, 0x02	; 2
 882:	10 f4       	brcc	.+4      	; 0x888 <fifoPopWord+0x16>
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	2e c0       	rjmp	.+92     	; 0x8e4 <fifoPopWord+0x72>
	return retCode;
}

uint8_t fifoPopWord(volatile fifo_t* pFifo, int16_t* pdata) {
	uint8_t retCode = 0;
	uint8_t*  pd = (uint8_t*)pdata;
 888:	db 01       	movw	r26, r22
	int i;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		if(pFifo->bytes>1) {
			for(i=0; i<2; i++) {
				*pd = pFifo->data[pFifo->iStart];						// read data from buffer
 88a:	e8 81       	ld	r30, Y
 88c:	f9 81       	ldd	r31, Y+1	; 0x01
 88e:	8a 81       	ldd	r24, Y+2	; 0x02
 890:	9b 81       	ldd	r25, Y+3	; 0x03
 892:	e8 0f       	add	r30, r24
 894:	f9 1f       	adc	r31, r25
 896:	80 81       	ld	r24, Z
 898:	8c 93       	st	X, r24
				pFifo->iStart = (pFifo->iStart+1) & (pFifo->mask-1);	// increment buffer start index
 89a:	2a 81       	ldd	r18, Y+2	; 0x02
 89c:	3b 81       	ldd	r19, Y+3	; 0x03
 89e:	88 85       	ldd	r24, Y+8	; 0x08
 8a0:	99 85       	ldd	r25, Y+9	; 0x09
 8a2:	01 97       	sbiw	r24, 0x01	; 1
 8a4:	2f 5f       	subi	r18, 0xFF	; 255
 8a6:	3f 4f       	sbci	r19, 0xFF	; 255
 8a8:	82 23       	and	r24, r18
 8aa:	93 23       	and	r25, r19
 8ac:	9b 83       	std	Y+3, r25	; 0x03
 8ae:	8a 83       	std	Y+2, r24	; 0x02
	int i;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		if(pFifo->bytes>1) {
			for(i=0; i<2; i++) {
				*pd = pFifo->data[pFifo->iStart];						// read data from buffer
 8b0:	e8 81       	ld	r30, Y
 8b2:	f9 81       	ldd	r31, Y+1	; 0x01
 8b4:	8a 81       	ldd	r24, Y+2	; 0x02
 8b6:	9b 81       	ldd	r25, Y+3	; 0x03
 8b8:	e8 0f       	add	r30, r24
 8ba:	f9 1f       	adc	r31, r25
 8bc:	80 81       	ld	r24, Z
 8be:	11 96       	adiw	r26, 0x01	; 1
 8c0:	8c 93       	st	X, r24
				pFifo->iStart = (pFifo->iStart+1) & (pFifo->mask-1);	// increment buffer start index
 8c2:	2a 81       	ldd	r18, Y+2	; 0x02
 8c4:	3b 81       	ldd	r19, Y+3	; 0x03
 8c6:	88 85       	ldd	r24, Y+8	; 0x08
 8c8:	99 85       	ldd	r25, Y+9	; 0x09
 8ca:	01 97       	sbiw	r24, 0x01	; 1
 8cc:	2f 5f       	subi	r18, 0xFF	; 255
 8ce:	3f 4f       	sbci	r19, 0xFF	; 255
 8d0:	82 23       	and	r24, r18
 8d2:	93 23       	and	r25, r19
 8d4:	9b 83       	std	Y+3, r25	; 0x03
 8d6:	8a 83       	std	Y+2, r24	; 0x02
				pd++;
			}
			pFifo->bytes -= 2;											// decrement number of bytes in buffer
 8d8:	8e 81       	ldd	r24, Y+6	; 0x06
 8da:	9f 81       	ldd	r25, Y+7	; 0x07
 8dc:	02 97       	sbiw	r24, 0x02	; 2
 8de:	9f 83       	std	Y+7, r25	; 0x07
 8e0:	8e 83       	std	Y+6, r24	; 0x06
 8e2:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 8e4:	4f bf       	out	0x3f, r20	; 63
			retCode = 1;
		}
	}

	return retCode;
}
 8e6:	df 91       	pop	r29
 8e8:	cf 91       	pop	r28
 8ea:	08 95       	ret

000008ec <fifoReadWord>:

uint8_t fifoReadWord(volatile fifo_t* pFifo, uint16_t n, int16_t* pdata) {
 8ec:	1f 93       	push	r17
 8ee:	cf 93       	push	r28
 8f0:	df 93       	push	r29
 8f2:	ec 01       	movw	r28, r24
	uint8_t retCode = 0;
	uint8_t*  pd	= (uint8_t*)pdata;
	int i;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 8f4:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 8f6:	f8 94       	cli
		if(pFifo->bytes < (2*n)) {	// if no n elements are in the buffer
 8f8:	8e 81       	ldd	r24, Y+6	; 0x06
 8fa:	9f 81       	ldd	r25, Y+7	; 0x07
 8fc:	66 0f       	add	r22, r22
 8fe:	77 1f       	adc	r23, r23
 900:	86 17       	cp	r24, r22
 902:	97 07       	cpc	r25, r23
 904:	10 f4       	brcc	.+4      	; 0x90a <fifoReadWord+0x1e>
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	23 c0       	rjmp	.+70     	; 0x950 <fifoReadWord+0x64>
	return retCode;
}

uint8_t fifoReadWord(volatile fifo_t* pFifo, uint16_t n, int16_t* pdata) {
	uint8_t retCode = 0;
	uint8_t*  pd	= (uint8_t*)pdata;
 90a:	da 01       	movw	r26, r20
		if(pFifo->bytes < (2*n)) {	// if no n elements are in the buffer
			retCode = 1;
		}
		else {
			for(i=0; i<2; i++) {
				*pd = pFifo->data[(pFifo->iStart+2*n+i) & (pFifo->mask-1)];	// read data
 90c:	e8 81       	ld	r30, Y
 90e:	f9 81       	ldd	r31, Y+1	; 0x01
 910:	2a 81       	ldd	r18, Y+2	; 0x02
 912:	3b 81       	ldd	r19, Y+3	; 0x03
 914:	88 85       	ldd	r24, Y+8	; 0x08
 916:	99 85       	ldd	r25, Y+9	; 0x09
 918:	26 0f       	add	r18, r22
 91a:	37 1f       	adc	r19, r23
 91c:	01 97       	sbiw	r24, 0x01	; 1
 91e:	28 23       	and	r18, r24
 920:	39 23       	and	r19, r25
 922:	e2 0f       	add	r30, r18
 924:	f3 1f       	adc	r31, r19
 926:	80 81       	ld	r24, Z
 928:	8c 93       	st	X, r24
 92a:	e8 81       	ld	r30, Y
 92c:	f9 81       	ldd	r31, Y+1	; 0x01
 92e:	8a 81       	ldd	r24, Y+2	; 0x02
 930:	9b 81       	ldd	r25, Y+3	; 0x03
 932:	28 85       	ldd	r18, Y+8	; 0x08
 934:	39 85       	ldd	r19, Y+9	; 0x09
 936:	01 96       	adiw	r24, 0x01	; 1
 938:	86 0f       	add	r24, r22
 93a:	97 1f       	adc	r25, r23
 93c:	21 50       	subi	r18, 0x01	; 1
 93e:	30 40       	sbci	r19, 0x00	; 0
 940:	82 23       	and	r24, r18
 942:	93 23       	and	r25, r19
 944:	e8 0f       	add	r30, r24
 946:	f9 1f       	adc	r31, r25
 948:	80 81       	ld	r24, Z
 94a:	11 96       	adiw	r26, 0x01	; 1
 94c:	8c 93       	st	X, r24
 94e:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 950:	1f bf       	out	0x3f, r17	; 63
			retCode = 0;
		}
	}

	return retCode;
}
 952:	df 91       	pop	r29
 954:	cf 91       	pop	r28
 956:	1f 91       	pop	r17
 958:	08 95       	ret

0000095a <fifoBytes>:

uint16_t fifoBytes(volatile fifo_t* pFifo) {
 95a:	fc 01       	movw	r30, r24
	uint16_t val = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 95c:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 95e:	f8 94       	cli
		val = pFifo->bytes;
 960:	26 81       	ldd	r18, Z+6	; 0x06
 962:	37 81       	ldd	r19, Z+7	; 0x07
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 964:	8f bf       	out	0x3f, r24	; 63
	}
	return val;
}
 966:	c9 01       	movw	r24, r18
 968:	08 95       	ret

0000096a <__vector_17>:
uint32_t counter = 0;
uint32_t sampleCountGlobal = 0;


/*** INTERRUPT ROUTINES ***/
ISR(TIMER1_COMPA_vect) {
 96a:	1f 92       	push	r1
 96c:	0f 92       	push	r0
 96e:	0f b6       	in	r0, 0x3f	; 63
 970:	0f 92       	push	r0
 972:	11 24       	eor	r1, r1
}
 974:	0f 90       	pop	r0
 976:	0f be       	out	0x3f, r0	; 63
 978:	0f 90       	pop	r0
 97a:	1f 90       	pop	r1
 97c:	18 95       	reti

0000097e <__vector_18>:

ISR(TIMER1_COMPB_vect) { 
 97e:	1f 92       	push	r1
 980:	0f 92       	push	r0
 982:	0f b6       	in	r0, 0x3f	; 63
 984:	0f 92       	push	r0
 986:	11 24       	eor	r1, r1
}
 988:	0f 90       	pop	r0
 98a:	0f be       	out	0x3f, r0	; 63
 98c:	0f 90       	pop	r0
 98e:	1f 90       	pop	r1
 990:	18 95       	reti

00000992 <adcInit>:
}

/*** FUNCTIONS ***/
void adcInit() {

	ADMUX |= (1 << REFS1) | (1 << REFS0); // 2.56V reference voltage for ADC
 992:	ec e7       	ldi	r30, 0x7C	; 124
 994:	f0 e0       	ldi	r31, 0x00	; 0
 996:	80 81       	ld	r24, Z
 998:	80 6c       	ori	r24, 0xC0	; 192
 99a:	80 83       	st	Z, r24
	ADCSRB |= (0 << MUX0) | (0 << MUX1) | (0 << MUX2) | (0 << MUX3) | (0 << MUX4); // select ADC0
 99c:	ab e7       	ldi	r26, 0x7B	; 123
 99e:	b0 e0       	ldi	r27, 0x00	; 0
 9a0:	8c 91       	ld	r24, X
 9a2:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADATE); // Auto-trigger mdoe enabled
 9a4:	ea e7       	ldi	r30, 0x7A	; 122
 9a6:	f0 e0       	ldi	r31, 0x00	; 0
 9a8:	80 81       	ld	r24, Z
 9aa:	80 62       	ori	r24, 0x20	; 32
 9ac:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (1 << ADPS0); // ADC-prescaler set to 1/32
 9ae:	80 81       	ld	r24, Z
 9b0:	85 60       	ori	r24, 0x05	; 5
 9b2:	80 83       	st	Z, r24
	ADCSRB |= (1 << ADTS2) | (1 << ADTS0); // Timer/Counter1 Compare-Match set 
 9b4:	8c 91       	ld	r24, X
 9b6:	85 60       	ori	r24, 0x05	; 5
 9b8:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE); // enable ADC
 9ba:	80 81       	ld	r24, Z
 9bc:	88 60       	ori	r24, 0x08	; 8
 9be:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); // enable ADC-Interrupt
 9c0:	80 81       	ld	r24, Z
 9c2:	80 68       	ori	r24, 0x80	; 128
 9c4:	80 83       	st	Z, r24
	//ADCSRA |= (1 << ADSC); // start ADC-conversion

}
 9c6:	08 95       	ret

000009c8 <adcStart>:

void adcStart(uint16_t sampleRateCode, uint32_t sampleCount, trigger_t triggerMode, int16_t triggerLevel) {
	uint32_t sampleCountGlobal = sampleCount;	// global Var for sampleCount
	OCR1A = sampleRateCode;	// set Compare-Match to var sampleRateCode
 9c8:	90 93 89 00 	sts	0x0089, r25
 9cc:	80 93 88 00 	sts	0x0088, r24
	TCNT1 = 0;				// start Timer at 0
 9d0:	10 92 85 00 	sts	0x0085, r1
 9d4:	10 92 84 00 	sts	0x0084, r1
	TIMSK1 = (1 << OCIE1A) | (1 << OCIE2B); // enable Timer-Compare-Match Interrupt
 9d8:	86 e0       	ldi	r24, 0x06	; 6
 9da:	80 93 6f 00 	sts	0x006F, r24
	TCCR1A = 0; // Output-Compare disable
 9de:	10 92 80 00 	sts	0x0080, r1
	TCCR1B |= (1 << CS10); // Timer prescaler set to CPU-clock
 9e2:	e1 e8       	ldi	r30, 0x81	; 129
 9e4:	f0 e0       	ldi	r31, 0x00	; 0
 9e6:	80 81       	ld	r24, Z
 9e8:	81 60       	ori	r24, 0x01	; 1
 9ea:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12); // CTC-Modus set
 9ec:	80 81       	ld	r24, Z
 9ee:	88 60       	ori	r24, 0x08	; 8
 9f0:	80 83       	st	Z, r24
	counter = 0;
 9f2:	10 92 e0 12 	sts	0x12E0, r1
 9f6:	10 92 e1 12 	sts	0x12E1, r1
 9fa:	10 92 e2 12 	sts	0x12E2, r1
 9fe:	10 92 e3 12 	sts	0x12E3, r1
	sei();
 a02:	78 94       	sei

}
 a04:	08 95       	ret

00000a06 <adcIsRunning>:

uint8_t adcIsRunning() {
 a06:	60 e0       	ldi	r22, 0x00	; 0
 a08:	20 91 e0 12 	lds	r18, 0x12E0
 a0c:	30 91 e1 12 	lds	r19, 0x12E1
 a10:	40 91 e2 12 	lds	r20, 0x12E2
 a14:	50 91 e3 12 	lds	r21, 0x12E3
 a18:	80 91 e4 12 	lds	r24, 0x12E4
 a1c:	90 91 e5 12 	lds	r25, 0x12E5
 a20:	a0 91 e6 12 	lds	r26, 0x12E6
 a24:	b0 91 e7 12 	lds	r27, 0x12E7
 a28:	28 17       	cp	r18, r24
 a2a:	39 07       	cpc	r19, r25
 a2c:	4a 07       	cpc	r20, r26
 a2e:	5b 07       	cpc	r21, r27
 a30:	09 f0       	breq	.+2      	; 0xa34 <adcIsRunning+0x2e>
 a32:	61 e0       	ldi	r22, 0x01	; 1
		return 0;
	}
	else {
	return 1;
	}
}
 a34:	86 2f       	mov	r24, r22
 a36:	08 95       	ret

00000a38 <__vector_29>:
 * \author Juergen Funck <juergen.funck@tu-berlin.de>
 * \date 2011-03-25
 * \brief Interrupt-Routine for the ADC-Interrupt. 
 *		  Gets called when an analog-to-digital conversion is complete
 */
ISR(ADC_vect) {
 a38:	1f 92       	push	r1
 a3a:	0f 92       	push	r0
 a3c:	0f b6       	in	r0, 0x3f	; 63
 a3e:	0f 92       	push	r0
 a40:	0b b6       	in	r0, 0x3b	; 59
 a42:	0f 92       	push	r0
 a44:	11 24       	eor	r1, r1
 a46:	2f 93       	push	r18
 a48:	3f 93       	push	r19
 a4a:	4f 93       	push	r20
 a4c:	5f 93       	push	r21
 a4e:	6f 93       	push	r22
 a50:	7f 93       	push	r23
 a52:	8f 93       	push	r24
 a54:	9f 93       	push	r25
 a56:	af 93       	push	r26
 a58:	bf 93       	push	r27
 a5a:	ef 93       	push	r30
 a5c:	ff 93       	push	r31

	counter++;
 a5e:	80 91 e0 12 	lds	r24, 0x12E0
 a62:	90 91 e1 12 	lds	r25, 0x12E1
 a66:	a0 91 e2 12 	lds	r26, 0x12E2
 a6a:	b0 91 e3 12 	lds	r27, 0x12E3
 a6e:	01 96       	adiw	r24, 0x01	; 1
 a70:	a1 1d       	adc	r26, r1
 a72:	b1 1d       	adc	r27, r1
 a74:	80 93 e0 12 	sts	0x12E0, r24
 a78:	90 93 e1 12 	sts	0x12E1, r25
 a7c:	a0 93 e2 12 	sts	0x12E2, r26
 a80:	b0 93 e3 12 	sts	0x12E3, r27

	uint16_t valADC = ADC;		// alternatively read result from ADC
 a84:	80 91 78 00 	lds	r24, 0x0078
 a88:	90 91 79 00 	lds	r25, 0x0079
	uint16_t valADC_offset = valADC - 512;
	filterWrite2Buf(valADC_offset);
 a8c:	80 50       	subi	r24, 0x00	; 0
 a8e:	92 40       	sbci	r25, 0x02	; 2
 a90:	0e 94 bf 02 	call	0x57e	; 0x57e <filterWrite2Buf>
	
	ADCSRA |= (1 << ADSC);	
 a94:	80 91 7a 00 	lds	r24, 0x007A
 a98:	80 64       	ori	r24, 0x40	; 64
 a9a:	80 93 7a 00 	sts	0x007A, r24

	if(counter == sampleCountGlobal){
 a9e:	20 91 e0 12 	lds	r18, 0x12E0
 aa2:	30 91 e1 12 	lds	r19, 0x12E1
 aa6:	40 91 e2 12 	lds	r20, 0x12E2
 aaa:	50 91 e3 12 	lds	r21, 0x12E3
 aae:	80 91 e4 12 	lds	r24, 0x12E4
 ab2:	90 91 e5 12 	lds	r25, 0x12E5
 ab6:	a0 91 e6 12 	lds	r26, 0x12E6
 aba:	b0 91 e7 12 	lds	r27, 0x12E7
 abe:	28 17       	cp	r18, r24
 ac0:	39 07       	cpc	r19, r25
 ac2:	4a 07       	cpc	r20, r26
 ac4:	5b 07       	cpc	r21, r27
 ac6:	c9 f4       	brne	.+50     	; 0xafa <__vector_29+0xc2>
		ADCSRA |= (0 << ADIE); // ADC-Interrupt turn off
 ac8:	80 91 7a 00 	lds	r24, 0x007A
 acc:	80 93 7a 00 	sts	0x007A, r24
		TCCR1B |= (0 << CS10) | (0 << CS11) | (0 << CS12); // turn off Timer
 ad0:	80 91 81 00 	lds	r24, 0x0081
 ad4:	80 93 81 00 	sts	0x0081, r24
		counter = 0;
 ad8:	10 92 e0 12 	sts	0x12E0, r1
 adc:	10 92 e1 12 	sts	0x12E1, r1
 ae0:	10 92 e2 12 	sts	0x12E2, r1
 ae4:	10 92 e3 12 	sts	0x12E3, r1
		sampleCountGlobal = 0;	// both set to 0
 ae8:	10 92 e4 12 	sts	0x12E4, r1
 aec:	10 92 e5 12 	sts	0x12E5, r1
 af0:	10 92 e6 12 	sts	0x12E6, r1
 af4:	10 92 e7 12 	sts	0x12E7, r1
		cli(); // deactive global interrupts
 af8:	f8 94       	cli
	}

}
 afa:	ff 91       	pop	r31
 afc:	ef 91       	pop	r30
 afe:	bf 91       	pop	r27
 b00:	af 91       	pop	r26
 b02:	9f 91       	pop	r25
 b04:	8f 91       	pop	r24
 b06:	7f 91       	pop	r23
 b08:	6f 91       	pop	r22
 b0a:	5f 91       	pop	r21
 b0c:	4f 91       	pop	r20
 b0e:	3f 91       	pop	r19
 b10:	2f 91       	pop	r18
 b12:	0f 90       	pop	r0
 b14:	0b be       	out	0x3b, r0	; 59
 b16:	0f 90       	pop	r0
 b18:	0f be       	out	0x3f, r0	; 63
 b1a:	0f 90       	pop	r0
 b1c:	1f 90       	pop	r1
 b1e:	18 95       	reti

00000b20 <__mulsi3>:
 b20:	62 9f       	mul	r22, r18
 b22:	d0 01       	movw	r26, r0
 b24:	73 9f       	mul	r23, r19
 b26:	f0 01       	movw	r30, r0
 b28:	82 9f       	mul	r24, r18
 b2a:	e0 0d       	add	r30, r0
 b2c:	f1 1d       	adc	r31, r1
 b2e:	64 9f       	mul	r22, r20
 b30:	e0 0d       	add	r30, r0
 b32:	f1 1d       	adc	r31, r1
 b34:	92 9f       	mul	r25, r18
 b36:	f0 0d       	add	r31, r0
 b38:	83 9f       	mul	r24, r19
 b3a:	f0 0d       	add	r31, r0
 b3c:	74 9f       	mul	r23, r20
 b3e:	f0 0d       	add	r31, r0
 b40:	65 9f       	mul	r22, r21
 b42:	f0 0d       	add	r31, r0
 b44:	99 27       	eor	r25, r25
 b46:	72 9f       	mul	r23, r18
 b48:	b0 0d       	add	r27, r0
 b4a:	e1 1d       	adc	r30, r1
 b4c:	f9 1f       	adc	r31, r25
 b4e:	63 9f       	mul	r22, r19
 b50:	b0 0d       	add	r27, r0
 b52:	e1 1d       	adc	r30, r1
 b54:	f9 1f       	adc	r31, r25
 b56:	bd 01       	movw	r22, r26
 b58:	cf 01       	movw	r24, r30
 b5a:	11 24       	eor	r1, r1
 b5c:	08 95       	ret

00000b5e <atoi>:
 b5e:	fc 01       	movw	r30, r24
 b60:	88 27       	eor	r24, r24
 b62:	99 27       	eor	r25, r25
 b64:	e8 94       	clt
 b66:	21 91       	ld	r18, Z+
 b68:	20 32       	cpi	r18, 0x20	; 32
 b6a:	e9 f3       	breq	.-6      	; 0xb66 <atoi+0x8>
 b6c:	29 30       	cpi	r18, 0x09	; 9
 b6e:	10 f0       	brcs	.+4      	; 0xb74 <atoi+0x16>
 b70:	2e 30       	cpi	r18, 0x0E	; 14
 b72:	c8 f3       	brcs	.-14     	; 0xb66 <atoi+0x8>
 b74:	2b 32       	cpi	r18, 0x2B	; 43
 b76:	41 f0       	breq	.+16     	; 0xb88 <atoi+0x2a>
 b78:	2d 32       	cpi	r18, 0x2D	; 45
 b7a:	39 f4       	brne	.+14     	; 0xb8a <atoi+0x2c>
 b7c:	68 94       	set
 b7e:	04 c0       	rjmp	.+8      	; 0xb88 <atoi+0x2a>
 b80:	0e 94 43 06 	call	0xc86	; 0xc86 <__mulhi_const_10>
 b84:	82 0f       	add	r24, r18
 b86:	91 1d       	adc	r25, r1
 b88:	21 91       	ld	r18, Z+
 b8a:	20 53       	subi	r18, 0x30	; 48
 b8c:	2a 30       	cpi	r18, 0x0A	; 10
 b8e:	c0 f3       	brcs	.-16     	; 0xb80 <atoi+0x22>
 b90:	1e f4       	brtc	.+6      	; 0xb98 <atoi+0x3a>
 b92:	90 95       	com	r25
 b94:	81 95       	neg	r24
 b96:	9f 4f       	sbci	r25, 0xFF	; 255
 b98:	08 95       	ret

00000b9a <atol>:
 b9a:	1f 93       	push	r17
 b9c:	fc 01       	movw	r30, r24
 b9e:	99 27       	eor	r25, r25
 ba0:	88 27       	eor	r24, r24
 ba2:	bc 01       	movw	r22, r24
 ba4:	e8 94       	clt
 ba6:	11 91       	ld	r17, Z+
 ba8:	10 32       	cpi	r17, 0x20	; 32
 baa:	e9 f3       	breq	.-6      	; 0xba6 <atol+0xc>
 bac:	19 30       	cpi	r17, 0x09	; 9
 bae:	10 f0       	brcs	.+4      	; 0xbb4 <atol+0x1a>
 bb0:	1e 30       	cpi	r17, 0x0E	; 14
 bb2:	c8 f3       	brcs	.-14     	; 0xba6 <atol+0xc>
 bb4:	1b 32       	cpi	r17, 0x2B	; 43
 bb6:	51 f0       	breq	.+20     	; 0xbcc <atol+0x32>
 bb8:	1d 32       	cpi	r17, 0x2D	; 45
 bba:	49 f4       	brne	.+18     	; 0xbce <atol+0x34>
 bbc:	68 94       	set
 bbe:	06 c0       	rjmp	.+12     	; 0xbcc <atol+0x32>
 bc0:	0e 94 2e 06 	call	0xc5c	; 0xc5c <__mulsi_const_10>
 bc4:	61 0f       	add	r22, r17
 bc6:	71 1d       	adc	r23, r1
 bc8:	81 1d       	adc	r24, r1
 bca:	91 1d       	adc	r25, r1
 bcc:	11 91       	ld	r17, Z+
 bce:	10 53       	subi	r17, 0x30	; 48
 bd0:	1a 30       	cpi	r17, 0x0A	; 10
 bd2:	b0 f3       	brcs	.-20     	; 0xbc0 <atol+0x26>
 bd4:	3e f4       	brtc	.+14     	; 0xbe4 <atol+0x4a>
 bd6:	90 95       	com	r25
 bd8:	80 95       	com	r24
 bda:	70 95       	com	r23
 bdc:	61 95       	neg	r22
 bde:	7f 4f       	sbci	r23, 0xFF	; 255
 be0:	8f 4f       	sbci	r24, 0xFF	; 255
 be2:	9f 4f       	sbci	r25, 0xFF	; 255
 be4:	1f 91       	pop	r17
 be6:	08 95       	ret

00000be8 <strtok>:
 be8:	48 ee       	ldi	r20, 0xE8	; 232
 bea:	52 e1       	ldi	r21, 0x12	; 18
 bec:	0e 94 07 06 	call	0xc0e	; 0xc0e <strtok_r>
 bf0:	08 95       	ret

00000bf2 <strncmp>:
 bf2:	fb 01       	movw	r30, r22
 bf4:	dc 01       	movw	r26, r24
 bf6:	41 50       	subi	r20, 0x01	; 1
 bf8:	50 40       	sbci	r21, 0x00	; 0
 bfa:	30 f0       	brcs	.+12     	; 0xc08 <strncmp+0x16>
 bfc:	8d 91       	ld	r24, X+
 bfe:	01 90       	ld	r0, Z+
 c00:	80 19       	sub	r24, r0
 c02:	19 f4       	brne	.+6      	; 0xc0a <strncmp+0x18>
 c04:	00 20       	and	r0, r0
 c06:	b9 f7       	brne	.-18     	; 0xbf6 <strncmp+0x4>
 c08:	88 1b       	sub	r24, r24
 c0a:	99 0b       	sbc	r25, r25
 c0c:	08 95       	ret

00000c0e <strtok_r>:
 c0e:	fa 01       	movw	r30, r20
 c10:	a1 91       	ld	r26, Z+
 c12:	b0 81       	ld	r27, Z
 c14:	00 97       	sbiw	r24, 0x00	; 0
 c16:	19 f4       	brne	.+6      	; 0xc1e <strtok_r+0x10>
 c18:	10 97       	sbiw	r26, 0x00	; 0
 c1a:	e1 f0       	breq	.+56     	; 0xc54 <strtok_r+0x46>
 c1c:	cd 01       	movw	r24, r26
 c1e:	dc 01       	movw	r26, r24
 c20:	cd 01       	movw	r24, r26
 c22:	0d 90       	ld	r0, X+
 c24:	00 20       	and	r0, r0
 c26:	11 f4       	brne	.+4      	; 0xc2c <strtok_r+0x1e>
 c28:	c0 01       	movw	r24, r0
 c2a:	13 c0       	rjmp	.+38     	; 0xc52 <strtok_r+0x44>
 c2c:	fb 01       	movw	r30, r22
 c2e:	21 91       	ld	r18, Z+
 c30:	22 23       	and	r18, r18
 c32:	19 f0       	breq	.+6      	; 0xc3a <strtok_r+0x2c>
 c34:	20 15       	cp	r18, r0
 c36:	d9 f7       	brne	.-10     	; 0xc2e <strtok_r+0x20>
 c38:	f3 cf       	rjmp	.-26     	; 0xc20 <strtok_r+0x12>
 c3a:	fb 01       	movw	r30, r22
 c3c:	21 91       	ld	r18, Z+
 c3e:	20 15       	cp	r18, r0
 c40:	19 f4       	brne	.+6      	; 0xc48 <strtok_r+0x3a>
 c42:	1e 92       	st	-X, r1
 c44:	11 96       	adiw	r26, 0x01	; 1
 c46:	06 c0       	rjmp	.+12     	; 0xc54 <strtok_r+0x46>
 c48:	22 23       	and	r18, r18
 c4a:	c1 f7       	brne	.-16     	; 0xc3c <strtok_r+0x2e>
 c4c:	0d 90       	ld	r0, X+
 c4e:	00 20       	and	r0, r0
 c50:	a1 f7       	brne	.-24     	; 0xc3a <strtok_r+0x2c>
 c52:	d0 01       	movw	r26, r0
 c54:	fa 01       	movw	r30, r20
 c56:	a1 93       	st	Z+, r26
 c58:	b0 83       	st	Z, r27
 c5a:	08 95       	ret

00000c5c <__mulsi_const_10>:
 c5c:	59 2f       	mov	r21, r25
 c5e:	48 2f       	mov	r20, r24
 c60:	37 2f       	mov	r19, r23
 c62:	26 2f       	mov	r18, r22
 c64:	66 0f       	add	r22, r22
 c66:	77 1f       	adc	r23, r23
 c68:	88 1f       	adc	r24, r24
 c6a:	99 1f       	adc	r25, r25
 c6c:	66 0f       	add	r22, r22
 c6e:	77 1f       	adc	r23, r23
 c70:	88 1f       	adc	r24, r24
 c72:	99 1f       	adc	r25, r25
 c74:	62 0f       	add	r22, r18
 c76:	73 1f       	adc	r23, r19
 c78:	84 1f       	adc	r24, r20
 c7a:	95 1f       	adc	r25, r21
 c7c:	66 0f       	add	r22, r22
 c7e:	77 1f       	adc	r23, r23
 c80:	88 1f       	adc	r24, r24
 c82:	99 1f       	adc	r25, r25
 c84:	08 95       	ret

00000c86 <__mulhi_const_10>:
 c86:	7a e0       	ldi	r23, 0x0A	; 10
 c88:	97 9f       	mul	r25, r23
 c8a:	90 2d       	mov	r25, r0
 c8c:	87 9f       	mul	r24, r23
 c8e:	80 2d       	mov	r24, r0
 c90:	91 0d       	add	r25, r1
 c92:	11 24       	eor	r1, r1
 c94:	08 95       	ret

00000c96 <_exit>:
 c96:	f8 94       	cli

00000c98 <__stop_program>:
 c98:	ff cf       	rjmp	.-2      	; 0xc98 <__stop_program>
