
aufgabe2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .signature    00000003  00840000  00840000  00000268  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000026b  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000054  00000000  00000000  0000028b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000010f  00000000  00000000  000002df  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000cb  00000000  00000000  000003ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001b4  00000000  00000000  000004b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000670  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ef  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000060  00000000  00000000  000007af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
   8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
   c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  24:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  34:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  54:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  58:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  5c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  60:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  68:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  6c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  70:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  74:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_29>
  78:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  7c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  80:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  84:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  88:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  8c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  90:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  94:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  98:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  9c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  a0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  a4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  a8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  ac:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  b0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  b4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  b8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  bc:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  c0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  c4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  c8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	12 e0       	ldi	r17, 0x02	; 2
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b2 e0       	ldi	r27, 0x02	; 2
  de:	e4 ef       	ldi	r30, 0xF4	; 244
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	a0 30       	cpi	r26, 0x00	; 0
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>
  f2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  f6:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

000000fa <__bad_interrupt>:
  fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <controlLEDs>:
#include <avr/io.h>
#include <avr/signature.h>
#include <avr/interrupt.h>


void controlLEDs(uint16_t value){
  fe:	9c 01       	movw	r18, r24
	if(value >= 0 && value <= 127){
 100:	80 38       	cpi	r24, 0x80	; 128
 102:	91 05       	cpc	r25, r1
 104:	18 f4       	brcc	.+6      	; 0x10c <controlLEDs+0xe>
		PORTC |= (1<<PC1) | (1 << PC4) | (1 << PC5);
 106:	88 b1       	in	r24, 0x08	; 8
 108:	82 63       	ori	r24, 0x32	; 50
 10a:	0a c0       	rjmp	.+20     	; 0x120 <controlLEDs+0x22>
	}

	else if(value >= 128 && value <= 511){
 10c:	80 58       	subi	r24, 0x80	; 128
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	80 58       	subi	r24, 0x80	; 128
 112:	91 40       	sbci	r25, 0x01	; 1
 114:	38 f4       	brcc	.+14     	; 0x124 <controlLEDs+0x26>
		PORTC &=  ~((1<<PC1) | (1 << PC4) | (1 << PC5));
 116:	88 b1       	in	r24, 0x08	; 8
 118:	8d 7c       	andi	r24, 0xCD	; 205
 11a:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << PC1) | (1 << PC4);
 11c:	88 b1       	in	r24, 0x08	; 8
 11e:	82 61       	ori	r24, 0x12	; 18
 120:	88 b9       	out	0x08, r24	; 8
 122:	08 95       	ret
		// PC5 red, turn on red
	}

	else if(value >= 512 && value <= 768){
 124:	c9 01       	movw	r24, r18
 126:	80 50       	subi	r24, 0x00	; 0
 128:	92 40       	sbci	r25, 0x02	; 2
 12a:	81 50       	subi	r24, 0x01	; 1
 12c:	91 40       	sbci	r25, 0x01	; 1
 12e:	28 f4       	brcc	.+10     	; 0x13a <controlLEDs+0x3c>
		PORTC &=  ~((1<<PC1) | (1 << PC4) | (1 << PC5));
 130:	88 b1       	in	r24, 0x08	; 8
 132:	8d 7c       	andi	r24, 0xCD	; 205
 134:	88 b9       	out	0x08, r24	; 8
		PORTC |= (1 << PC1);
 136:	41 9a       	sbi	0x08, 1	; 8
 138:	08 95       	ret
		// PC1 green
		// PC5 red, turn on red and green
	}

	else if(value >= 769 && value <= 1023){
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	33 40       	sbci	r19, 0x03	; 3
 13e:	2f 3f       	cpi	r18, 0xFF	; 255
 140:	31 05       	cpc	r19, r1
 142:	18 f4       	brcc	.+6      	; 0x14a <controlLEDs+0x4c>
		PORTC &=  ~((1<<PC1) | (1 << PC4) | (1 << PC5));
 144:	88 b1       	in	r24, 0x08	; 8
 146:	8d 7c       	andi	r24, 0xCD	; 205
 148:	88 b9       	out	0x08, r24	; 8
 14a:	08 95       	ret

0000014c <__vector_29>:
	}

}


ISR(ADC_vect){
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	0b b6       	in	r0, 0x3b	; 59
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	2f 93       	push	r18
 15c:	3f 93       	push	r19
 15e:	4f 93       	push	r20
 160:	5f 93       	push	r21
 162:	6f 93       	push	r22
 164:	7f 93       	push	r23
 166:	8f 93       	push	r24
 168:	9f 93       	push	r25
 16a:	af 93       	push	r26
 16c:	bf 93       	push	r27
 16e:	ef 93       	push	r30
 170:	ff 93       	push	r31
	uint16_t resultADC = ADC; // read ADC
 172:	80 91 78 00 	lds	r24, 0x0078
 176:	90 91 79 00 	lds	r25, 0x0079
	controlLEDs(resultADC);	
 17a:	0e 94 7f 00 	call	0xfe	; 0xfe <controlLEDs>
	//ADCSRA |= (1 << ADSC);	
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	7f 91       	pop	r23
 18c:	6f 91       	pop	r22
 18e:	5f 91       	pop	r21
 190:	4f 91       	pop	r20
 192:	3f 91       	pop	r19
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0b be       	out	0x3b, r0	; 59
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <init>:


void init(void){
	// initialize ADC and IO
	ADMUX |= (0 <<  MUX4) | (0 <<  MUX3) | (0 <<  MUX2) | (0 <<  MUX1) | (0 <<  MUX0); // Single-ended input ADC0
 1a4:	ec e7       	ldi	r30, 0x7C	; 124
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS1) | (1 << REFS0); // set internal reference for ADC, 2.56V
 1ac:	80 81       	ld	r24, Z
 1ae:	80 6c       	ori	r24, 0xC0	; 192
 1b0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); // enable ADC
 1b2:	ea e7       	ldi	r30, 0x7A	; 122
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	80 68       	ori	r24, 0x80	; 128
 1ba:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (0 << ADPS1) | (1 << ADPS0); // ADC-prescaler set to 1/32
 1bc:	80 81       	ld	r24, Z
 1be:	85 60       	ori	r24, 0x05	; 5
 1c0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE); // enable ADC interrupt
 1c2:	80 81       	ld	r24, Z
 1c4:	88 60       	ori	r24, 0x08	; 8
 1c6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADATE); // Auto-trigger enabled;
 1c8:	80 81       	ld	r24, Z
 1ca:	80 62       	ori	r24, 0x20	; 32
 1cc:	80 83       	st	Z, r24
	ADCSRB |= (0 << ADTS2) | (0 << ADTS1) | (0 << ADTS0); // free-running mode enabled
 1ce:	eb e7       	ldi	r30, 0x7B	; 123
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	80 83       	st	Z, r24
}
 1d6:	08 95       	ret

000001d8 <main>:

int main(void){

	init(); // run func init()
 1d8:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <init>
	sei();	// enable global interrupts
 1dc:	78 94       	sei
	ADCSRA |= (1 << ADSC); // start ADC conversation
 1de:	80 91 7a 00 	lds	r24, 0x007A
 1e2:	80 64       	ori	r24, 0x40	; 64
 1e4:	80 93 7a 00 	sts	0x007A, r24

	DDRC |= (1<<PC1) | (1 << PC4) | (1 << PC5);
 1e8:	87 b1       	in	r24, 0x07	; 7
 1ea:	82 63       	ori	r24, 0x32	; 50
 1ec:	87 b9       	out	0x07, r24	; 7
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <main+0x16>

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
