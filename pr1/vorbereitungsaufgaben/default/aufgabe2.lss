
aufgabe2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .signature    00000003  00840000  00840000  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000261  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000054  00000000  00000000  00000281  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000125  00000000  00000000  000002d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000d8  00000000  00000000  000003fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001ac  00000000  00000000  000004d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000105  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000006b  00000000  00000000  000007d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
   8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
   c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  10:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  14:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  18:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  1c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  20:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  24:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  28:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  2c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  30:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  34:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  38:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  3c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  40:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  44:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  4c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  50:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  54:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  58:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  5c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  60:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  64:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  68:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  6c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  70:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  74:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__vector_29>
  78:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  7c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  80:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  84:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  88:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  8c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  90:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  94:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  98:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  9c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  a0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  a4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  a8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  ac:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  b0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  b4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  b8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  bc:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  c0:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  c4:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>
  c8:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	12 e0       	ldi	r17, 0x02	; 2
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b2 e0       	ldi	r27, 0x02	; 2
  de:	ea ee       	ldi	r30, 0xEA	; 234
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	a0 30       	cpi	r26, 0x00	; 0
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>
  f2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
  f6:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

000000fa <__bad_interrupt>:
  fa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fe <controlLEDs>:
#include <avr/io.h>
#include <avr/signature.h>
#include <avr/interrupt.h>


void controlLEDs(uint16_t value){
  fe:	9c 01       	movw	r18, r24
	if(value >= 0 && value <= 127){
 100:	80 38       	cpi	r24, 0x80	; 128
 102:	91 05       	cpc	r25, r1
 104:	10 f4       	brcc	.+4      	; 0x10a <controlLEDs+0xc>
		PORTC |= (0 << PC1) | (0 << PC2) | (0 << PC3);  // Turn off LEDs
 106:	88 b1       	in	r24, 0x08	; 8
 108:	0f c0       	rjmp	.+30     	; 0x128 <controlLEDs+0x2a>
	}

	else if(value >= 128 && value <= 511){
 10a:	80 58       	subi	r24, 0x80	; 128
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	80 58       	subi	r24, 0x80	; 128
 110:	91 40       	sbci	r25, 0x01	; 1
 112:	10 f4       	brcc	.+4      	; 0x118 <controlLEDs+0x1a>
		PORTC |= (1 << PC1) | (0 << PC2) | (0 << PC3);  // Turn on red
 114:	41 9a       	sbi	0x08, 1	; 8
 116:	08 95       	ret
	}

	else if(value >= 512 && value <= 768){
 118:	c9 01       	movw	r24, r18
 11a:	80 50       	subi	r24, 0x00	; 0
 11c:	92 40       	sbci	r25, 0x02	; 2
 11e:	81 50       	subi	r24, 0x01	; 1
 120:	91 40       	sbci	r25, 0x01	; 1
 122:	20 f4       	brcc	.+8      	; 0x12c <controlLEDs+0x2e>
		PORTC |= (1 << PC1) | (1 << PC2) | (0 << PC3);  // Turn on red and green
 124:	88 b1       	in	r24, 0x08	; 8
 126:	86 60       	ori	r24, 0x06	; 6
 128:	88 b9       	out	0x08, r24	; 8
 12a:	08 95       	ret
	}

	else if(value >= 769 && value <= 1023){
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	33 40       	sbci	r19, 0x03	; 3
 130:	2f 3f       	cpi	r18, 0xFF	; 255
 132:	31 05       	cpc	r19, r1
 134:	18 f4       	brcc	.+6      	; 0x13c <controlLEDs+0x3e>
		PORTC |= (1 << PC1) | (1 << PC2) | (1 << PC3); // Turn on red, green and orange
 136:	88 b1       	in	r24, 0x08	; 8
 138:	8e 60       	ori	r24, 0x0E	; 14
 13a:	88 b9       	out	0x08, r24	; 8
 13c:	08 95       	ret

0000013e <__vector_29>:
	}

}


ISR(ADC_vect){
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	0b b6       	in	r0, 0x3b	; 59
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	2f 93       	push	r18
 14e:	3f 93       	push	r19
 150:	4f 93       	push	r20
 152:	5f 93       	push	r21
 154:	6f 93       	push	r22
 156:	7f 93       	push	r23
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
 15c:	af 93       	push	r26
 15e:	bf 93       	push	r27
 160:	ef 93       	push	r30
 162:	ff 93       	push	r31
	uint8_t theLowADC = ADCL; // first 8 bits from ADCL
 164:	20 91 78 00 	lds	r18, 0x0078
	uint16_t theTenBitResults = (ADCH << 8) | theLowADC; // 2 more bits to achieve values up to 1023
 168:	40 91 79 00 	lds	r20, 0x0079
	controlLEDs(theTenBitResults);	
 16c:	94 2f       	mov	r25, r20
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	82 2b       	or	r24, r18
 174:	93 2b       	or	r25, r19
 176:	0e 94 7f 00 	call	0xfe	; 0xfe <controlLEDs>
	ADCSRA |= (1 << ADSC);	
 17a:	ea e7       	ldi	r30, 0x7A	; 122
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	80 64       	ori	r24, 0x40	; 64
 182:	80 83       	st	Z, r24
}
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	7f 91       	pop	r23
 192:	6f 91       	pop	r22
 194:	5f 91       	pop	r21
 196:	4f 91       	pop	r20
 198:	3f 91       	pop	r19
 19a:	2f 91       	pop	r18
 19c:	0f 90       	pop	r0
 19e:	0b be       	out	0x3b, r0	; 59
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <init>:


void init(void){
	// initialize ADC and IO
	ADMUX |= (0 <<  MUX4) | (0 <<  MUX3) | (0 <<  MUX2) | (0 <<  MUX1) | (0 <<  MUX0); // Single-ended input ADC0
 1aa:	ec e7       	ldi	r30, 0x7C	; 124
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	80 81       	ld	r24, Z
 1b0:	80 83       	st	Z, r24
	ADMUX |= (1 << REFS1) | (1 << REFS0); // set internal reference for ADC, 2.56V
 1b2:	80 81       	ld	r24, Z
 1b4:	80 6c       	ori	r24, 0xC0	; 192
 1b6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN); // enable ADC
 1b8:	ea e7       	ldi	r30, 0x7A	; 122
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	80 68       	ori	r24, 0x80	; 128
 1c0:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADPS2) | (0 << ADPS1) | (1 << ADPS0); // ADC-prescaler set to 1/32
 1c2:	80 81       	ld	r24, Z
 1c4:	85 60       	ori	r24, 0x05	; 5
 1c6:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE); // enable ADC interrupt
 1c8:	80 81       	ld	r24, Z
 1ca:	88 60       	ori	r24, 0x08	; 8
 1cc:	80 83       	st	Z, r24
}
 1ce:	08 95       	ret

000001d0 <main>:

int main(void){

	init(); // run func init()
 1d0:	0e 94 d5 00 	call	0x1aa	; 0x1aa <init>
	sei();	// enable global interrupts
 1d4:	78 94       	sei
	ADCSRA |= (1 << ADSC); // start ADC conversation
 1d6:	80 91 7a 00 	lds	r24, 0x007A
 1da:	80 64       	ori	r24, 0x40	; 64
 1dc:	80 93 7a 00 	sts	0x007A, r24

	DDRC |= (1<<PC1);
 1e0:	39 9a       	sbi	0x07, 1	; 7
	PORTC |= (1<<PC1);
 1e2:	41 9a       	sbi	0x08, 1	; 8
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <main+0x14>

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
